(function(a) {
    a.vakata = {};
    a.vakata.css = {
        get_css: function(f, c, d) {
            f = f.toLowerCase();
            var e = d.cssRules || d.rules,
                b = 0;
            do {
                if (e.length && b > e.length + 5) {
                    return false
                }
                if (e[b].selectorText && e[b].selectorText.toLowerCase() == f) {
                    if (c === true) {
                        if (d.removeRule) {
                            d.removeRule(b)
                        }
                        if (d.deleteRule) {
                            d.deleteRule(b)
                        }
                        return true
                    } else {
                        return e[b]
                    }
                }
            } while (e[++b]);
            return false
        },
        add_css: function(c, b) {
            if (a.jstree.css.get_css(c, false, b)) {
                return false
            }
            if (b.insertRule) {
                b.insertRule(c + " { }", 0)
            } else {
                b.addRule(c, null, 0)
            }
            return a.vakata.css.get_css(c)
        },
        remove_css: function(c, b) {
            return a.vakata.css.get_css(c, true, b)
        },
        add_sheet: function(c) {
            var b;
            if (c.str) {
                b = document.createElement("style");
                b.setAttribute("type", "text/css");
                if (b.styleSheet) {
                    document.getElementsByTagName("head")[0].appendChild(b);
                    b.styleSheet.cssText = c.str
                } else {
                    b.appendChild(document.createTextNode(c.str));
                    document.getElementsByTagName("head")[0].appendChild(b)
                }
                return b.sheet || b.styleSheet
            }
            if (c.url) {
                if (document.createStyleSheet) {
                    try {
                        b = document.createStyleSheet(c.url)
                    } catch (d) {}
                } else {
                    b = document.createElement("link");
                    b.rel = "stylesheet";
                    b.type = "text/css";
                    b.media = "all";
                    b.href = c.url;
                    document.getElementsByTagName("head")[0].appendChild(b);
                    return b.styleSheet
                }
            }
        }
    }
})(jQuery);
(function(e) {
    var f = [],
        c = -1,
        b = {},
        a = {},
        d = false;
    e.fn.jstree = function(j) {
        var g = (typeof j == "string"),
            h = Array.prototype.slice.call(arguments, 1),
            i = this;
        if (!g && e.meta) {
            h.push(e.metadata.get(this).jstree)
        }
        j = !g && h.length ? e.extend.apply(null, [true, j].concat(h)) : j;
        if (g && j.substring(0, 1) == "_") {
            return i
        }
        if (g) {
            this.each(function() {
                var k = f[e.data(this, "jstree-instance-id")],
                    l = (k && e.isFunction(k[j])) ? k[j].apply(k, h) : k;
                if (typeof l !== "undefined" && (j.indexOf("is_" === 0) || (l !== true && l !== false))) {
                    i = l;
                    return false
                }
            })
        } else {
            this.each(function() {
                var l = e.data(this, "jstree-instance-id"),
                    k = false;
                if (typeof l !== "undefined" && f[l]) {
                    f[l].destroy()
                }
                l = parseInt(f.push({}), 10) - 1;
                e.data(this, "jstree-instance-id", l);
                if (!j) {
                    j = {}
                }
                j.plugins = e.isArray(j.plugins) ? j.plugins : e.jstree.defaults.plugins;
                if (e.inArray("core", j.plugins) === -1) {
                    j.plugins.unshift("core")
                }
                k = e.extend(true, {}, e.jstree.defaults, j);
                k.plugins = j.plugins;
                e.jstree.is_ie6 = d;
                e.each(b, function(m, n) {
                    if (e.inArray(m, k.plugins) === -1) {
                        k[m] = null;
                        delete k[m]
                    }
                });
                f[l] = new e.jstree._instance(l, e(this).addClass("jstree jstree-" + l), k);
                e.each(f[l]._get_settings().plugins, function(m, n) {
                    f[l].data[n] = {}
                });
                e.each(f[l]._get_settings().plugins, function(m, n) {
                    if (b[n]) {
                        b[n].__init.apply(f[l])
                    }
                });
                f[l].init()
            })
        }
        return i
    };
    e.jstree = {
        defaults: {
            plugins: []
        },
        _focused: function() {
            return f[c] || null
        },
        _reference: function(g) {
            if (f[g]) {
                return f[g]
            }
            var h = e(g);
            if (!h.length && typeof g === "string") {
                h = e("#" + g)
            }
            if (!h.length) {
                return null
            }
            return f[h.closest(".jstree").data("jstree-instance-id")] || null
        },
        _instance: function(h, g, i) {
            this.data = {
                core: {}
            };
            this.get_settings = function() {
                return e.extend(true, {}, i)
            };
            this._get_settings = function() {
                return i
            };
            this.get_index = function() {
                return h
            };
            this.get_container = function() {
                return g
            };
            this._set_settings = function(j) {
                i = e.extend(true, {}, i, j)
            }
        },
        _fn: {},
        plugin: function(g, h) {
            h = e.extend({}, {
                __init: e.noop,
                __destroy: e.noop,
                _fn: {},
                defaults: false
            }, h);
            b[g] = h;
            e.jstree.defaults[g] = h.defaults;
            e.each(h._fn, function(j, k) {
                k.plugin = g;
                k.old = e.jstree._fn[j];
                e.jstree._fn[j] = function() {
                    var i, m = k,
                        l = Array.prototype.slice.call(arguments),
                        o = new e.Event("before.jstree"),
                        n = false;
                    do {
                        if (m && m.plugin && e.inArray(m.plugin, this._get_settings().plugins) !== -1) {
                            break
                        }
                        m = m.old
                    } while (m);
                    if (!m) {
                        return
                    }
                    i = this.get_container().triggerHandler(o, {
                        func: j,
                        inst: this,
                        args: l
                    });
                    if (i === false) {
                        return false
                    }
                    if (typeof i !== "undefined") {
                        l = i
                    }
                    if (j.indexOf("_") === 0) {
                        i = m.apply(this, l)
                    } else {
                        i = m.apply(e.extend({}, this, {
                            __callback: function(q, r) {
                                this.get_container().triggerHandler(j + ".jstree", {
                                    inst: this,
                                    args: l,
                                    rslt: q,
                                    rlbk: n
                                });
                                if (!(r && r.nocall_jstree)) {
                                    this.get_container().triggerHandler(j + "._jstree", {
                                        inst: this,
                                        args: l,
                                        rslt: q,
                                        rlbk: n
                                    })
                                }
                            },
                            __rollback: function() {
                                n = this.get_rollback();
                                return n
                            },
                            __call_old: function(p) {
                                return m.old.apply(this, (p ? Array.prototype.slice.call(arguments, 1) : l))
                            }
                        }), l)
                    }
                    return i
                };
                e.jstree._fn[j].old = k.old;
                e.jstree._fn[j].plugin = g
            })
        },
        rollback: function(g) {
            if (g) {
                if (!e.isArray(g)) {
                    g = [g]
                }
                e.each(g, function(h, j) {
                    f[j.i].set_rollback(j.h, j.d)
                })
            }
        }
    };
    e.jstree._fn = e.jstree._instance.prototype = {};
    e(function() {
        var i = navigator.userAgent.toLowerCase(),
            h = (i.match(/.+?(?:rv|it|ra|ie)[\/: ]([\d.]+)/) || [0, "0"])[1],
            g = ".jstree ul, .jstree li { display:block; margin:0 0 0 0; padding:0 0 0 0; list-style-type:none; } .jstree li { display:block; min-height:18px; line-height:18px; white-space:nowrap; margin-left:18px; } .jstree-rtl li { margin-left:0; margin-right:18px; } .jstree > ul > li { margin-left:0px; } .jstree-rtl > ul > li { margin-right:0px; } .jstree ins { display:inline-block; text-decoration:none; width:18px; height:18px; margin:0 0 0 0; padding:0; } .jstree a { line-height:16px; height:16px; color:black; white-space:nowrap; text-decoration:none; padding:1px 2px; margin:0; } .jstree a:focus { outline: none; } .jstree a > ins { height:16px; width:16px; } .jstree a > .jstree-icon { margin-right:3px; } .jstree-rtl a > .jstree-icon { margin-left:3px; margin-right:0; } li.jstree-open > ul { display:block; } li.jstree-closed > ul { display:none; } ";
        if (/msie/.test(i) && parseInt(h, 10) == 6) {
            d = true;
            g += ".jstree li { height:18px; margin-left:0; margin-right:0; } .jstree li li { margin-left:18px; } .jstree-rtl li li { margin-left:0px; margin-right:18px; } li.jstree-open ul { display:block; } li.jstree-closed ul { display:none !important; } .jstree li a { display:inline; border-width:0 !important; padding:0px 2px !important; } .jstree li a ins { height:16px; width:16px; margin-right:3px; } .jstree-rtl li a ins { margin-right:0px; margin-left:3px; } "
        }
        if (/msie/.test(i) && parseInt(h, 10) == 7) {
            g += ".jstree li a { border-width:0 !important; padding:0px 2px !important; } "
        }
        e.vakata.css.add_sheet({
            str: g
        })
    });
    e.jstree.plugin("core", {
        __init: function() {
            this.data.core.to_open = e.map(e.makeArray(this.get_settings().core.initially_open), function(g) {
                return "#" + g.toString().replace(/^#/, "").replace("\\/", "/").replace("/", "\\/")
            })
        },
        defaults: {
            html_titles: false,
            animation: 500,
            initially_open: [],
            rtl: false
        },
        _fn: {
            init: function() {
                this.set_focus();
                if (this._get_settings().core.rtl) {
                    this.get_container().addClass("jstree-rtl").css("direction", "rtl")
                }
                this.get_container().html("<ul><li class='jstree-last jstree-leaf'><ins>&#160;</ins><a class='jstree-loading' href='#'><ins class='jstree-icon'>&#160;</ins>" + this._get_settings().core.loadingText + "</a></li></ul>");
                this.data.core.li_height = this.get_container().find("ul li.jstree-closed, ul li.jstree-leaf").eq(0).height() || 18;
                if (this._get_settings().core.isClickNodeDoOpenClose) {
                    this.get_container().delegate("li > a", "click.jstree", e.proxy(function(h) {
                        var g = e(h.target);
                        if ((g.is("a") || (g.is("ins") && !g.hasClass("jstree-checkbox"))) && h.pageY - g.offset().top < this.data.core.li_height) {
                            this.toggle_node(g)
                        }
                    }, this))
                }
                if (this._get_settings().core.isDblClickNodeDoOpenClose) {
                    this.get_container().delegate("li > a", "dblclick.jstree", e.proxy(function(h) {
                        var g = e(h.target);
                        if ((g.is("a") || (g.is("ins") && !g.hasClass("jstree-checkbox"))) && h.pageY - g.offset().top < this.data.core.li_height) {
                            this.toggle_node(g)
                        }
                    }, this))
                }
                if (this._get_settings().checkbox && !this._get_settings().checkbox.readOnly && !this._get_settings().checkbox.disabled && this._get_settings().checkbox.leftmouse && this._get_settings().checkbox.leftmouse.isClickCheckboxDoOpenClose) {
                    this.get_container().delegate("a > ins.jstree-checkbox", "click.jstree", e.proxy(function(h) {
                        var g = e(h.target);
                        if (h.pageY - g.offset().top < this.data.core.li_height) {
                            this.toggle_node(g)
                        }
                    }, this))
                }
                if (this._get_settings().checkbox && !this._get_settings().checkbox.readOnly && !this._get_settings().checkbox.disabled && this._get_settings().checkbox.leftmouse && this._get_settings().checkbox.leftmouse.isClickCheckboxDoOpenCheck) {
                    this.get_container().delegate("a > ins.jstree-checkbox", "click.jstree", e.proxy(function(h) {
                        var g = e(h.target);
                        if (h.pageY - g.offset().top < this.data.core.li_height) {
                            if (g.parent().parent().hasClass("jstree-checked") && g.parent().parent().hasClass("jstree-closed")) {
                                this.toggle_node(g)
                            }
                        }
                    }, this))
                }
                if (this._get_settings().checkbox && !this._get_settings().checkbox.readOnly && !this._get_settings().checkbox.disabled && this._get_settings().checkbox.leftmouse && this._get_settings().checkbox.leftmouse.isDblClickCheckboxDoOpenClose) {
                    this.get_container().delegate("a > ins.jstree-checkbox", "dblclick.jstree", e.proxy(function(h) {
                        var g = e(h.target);
                        if (h.pageY - g.offset().top < this.data.core.li_height) {
                            this.toggle_node(g)
                        }
                    }, this))
                }
                if (this._get_settings().core.isContextClickNodeDoOpenClose) {
                    this.get_container().delegate("li > a", "contextmenu.jstree", e.proxy(function(h) {
                        var g = e(h.target);
                        if ((g.is("a") || (g.is("ins") && !g.hasClass("jstree-checkbox"))) && h.pageY - g.offset().top < this.data.core.li_height) {
                            this.toggle_node(g)
                        }
                    }, this))
                }
                if (this._get_settings().checkbox && !this._get_settings().checkbox.readOnly && !this._get_settings().checkbox.disabled && this._get_settings().checkbox.rightmouse && this._get_settings().checkbox.rightmouse.isClickCheckboxDoOpenClose) {
                    this.get_container().delegate("a > ins.jstree-checkbox", "contextmenu.jstree", e.proxy(function(h) {
                        var g = e(h.target);
                        if (h.pageY - g.offset().top < this.data.core.li_height) {
                            this.toggle_node(g)
                        }
                    }, this))
                }
                if (this._get_settings().checkbox && !this._get_settings().checkbox.readOnly && !this._get_settings().checkbox.disabled && this._get_settings().checkbox.rightmouse && this._get_settings().checkbox.rightmouse.isClickCheckboxDoOpenCheck) {
                    this.get_container().delegate("a > ins.jstree-checkbox", "contextmenu.jstree", e.proxy(function(h) {
                        var g = e(h.target);
                        if (h.pageY - g.offset().top < this.data.core.li_height) {
                            if (g.parent().parent().hasClass("jstree-checked") && g.parent().parent().hasClass("jstree-closed")) {
                                this.toggle_node(g)
                            }
                        }
                    }, this))
                }
                this.get_container().delegate("li > a", "contextmenu.jstree", e.proxy(function(g) {
                    return false
                }, this));
                if (this.get_settings().contextmenu) {
                    this.get_container().delegate("li > a", "click.jstree", e.proxy(function(g) {
                        e.vakata.context.hide()
                    }, this))
                }
                this.get_container().delegate("li > ins", "click.jstree", e.proxy(function(h) {
                    var g = e(h.target);
                    if (g.is("ins") && h.pageY - g.offset().top < this.data.core.li_height) {
                        this.toggle_node(g)
                    }
                }, this)).bind("mousedown.jstree", e.proxy(function() {
                    this.set_focus()
                }, this)).bind("dblclick.jstree", function(h) {
                    var i;
                    if (document.selection && document.selection.empty) {
                        document.selection.empty()
                    } else {
                        if (window.getSelection) {
                            i = window.getSelection();
                            try {
                                i.removeAllRanges();
                                i.collapse()
                            } catch (g) {}
                        }
                    }
                });
                this.__callback();
                this.load_node(-1, function() {
                    this.loaded();
                    this.reopen()
                })
            },
            destroy: function() {
                var g, k = this.get_index(),
                    h = this._get_settings(),
                    j = this;
                e.each(h.plugins, function(l, n) {
                    try {
                        b[n].__destroy.apply(j)
                    } catch (m) {}
                });
                this.__callback();
                if (this.is_focused()) {
                    for (g in f) {
                        if (f.hasOwnProperty(g) && g != k) {
                            f[g].set_focus();
                            break
                        }
                    }
                }
                if (k === c) {
                    c = -1
                }
                this.get_container().unbind(".jstree").undelegate(".jstree").removeData("jstree-instance-id").find("[class^='jstree']").andSelf().attr("class", function() {
                    return this.className.replace(/jstree[^ ]*|$/ig, "")
                });
                f[k] = null;
                delete f[k]
            },
            save_opened: function() {
                var g = this;
                this.data.core.to_open = [];
                this.get_container().find(".jstree-open").each(function() {
                    g.data.core.to_open.push("#" + this.id.toString().replace(/^#/, "").replace("\\/", "/").replace("/", "\\/"))
                });
                this.__callback(g.data.core.to_open)
            },
            reopen: function(h) {
                var k = this,
                    g = true,
                    j = [],
                    i = [];
                if (!h) {
                    this.data.core.reopen = false;
                    this.data.core.refreshing = true
                }
                if (this.data.core.to_open.length) {
                    e.each(this.data.core.to_open, function(l, m) {
                        if (m == "#") {
                            return true
                        }
                        if (e(m).length && e(m).is(".jstree-closed")) {
                            j.push(m)
                        } else {
                            i.push(m)
                        }
                    });
                    if (j.length) {
                        this.data.core.to_open = i;
                        e.each(j, function(l, m) {
                            k.open_node(m, function() {
                                k.reopen(true)
                            }, true)
                        });
                        g = false
                    }
                }
                if (g) {
                    if (this.data.core.reopen) {
                        clearTimeout(this.data.core.reopen)
                    }
                    this.data.core.reopen = setTimeout(function() {
                        k.__callback({}, k)
                    }, 50);
                    this.data.core.refreshing = false
                }
            },
            refresh: function(g) {
                var h = this;
                this.save_opened();
                if (!g) {
                    g = -1
                }
                g = this._get_node(g);
                if (!g) {
                    g = -1
                }
                if (g !== -1) {
                    g.children("UL").remove()
                }
                this.load_node(g, function() {
                    h.__callback({
                        obj: g
                    });
                    h.reopen()
                })
            },
            loaded: function() {
                this.__callback()
            },
            set_focus: function() {
                var g = e.jstree._focused();
                if (g && g !== this) {
                    g.get_container().removeClass("jstree-focused")
                }
                if (g !== this) {
                    this.get_container().addClass("jstree-focused");
                    c = this.get_index()
                }
                this.__callback()
            },
            is_focused: function() {
                return c == this.get_index()
            },
            get_node: function(g) {
                return this._get_node(g)
            },
            parse_json: function(h, g) {
                return this._parse_json(h, g)
            },
            _get_node: function(g) {
                var h = e(g, this.get_container());
                if (h.is(".jstree") || g == -1) {
                    return -1
                }
                h = h.closest("li", this.get_container());
                return h.length ? h : false
            },
            _get_next: function(h, g) {
                h = this._get_node(h);
                if (h === -1) {
                    return this.get_container().find("> ul > li:first-child")
                }
                if (!h.length) {
                    return false
                }
                if (g) {
                    return (h.nextAll("li").size() > 0) ? h.nextAll("li:eq(0)") : false
                }
                if (h.hasClass("jstree-open")) {
                    return h.find("li:eq(0)")
                } else {
                    if (h.nextAll("li").size() > 0) {
                        return h.nextAll("li:eq(0)")
                    } else {
                        return h.parentsUntil(".jstree", "li").next("li").eq(0)
                    }
                }
            },
            _get_prev: function(h, g) {
                h = this._get_node(h);
                if (h === -1) {
                    return this.get_container().find("> ul > li:last-child")
                }
                if (!h.length) {
                    return false
                }
                if (g) {
                    return (h.prevAll("li").length > 0) ? h.prevAll("li:eq(0)") : false
                }
                if (h.prev("li").length) {
                    h = h.prev("li").eq(0);
                    while (h.hasClass("jstree-open")) {
                        h = h.children("ul:eq(0)").children("li:last")
                    }
                    return h
                } else {
                    var i = h.parentsUntil(".jstree", "li:eq(0)");
                    return i.length ? i : false
                }
            },
            get_parent: function(g) {
                return this._get_parent(g)
            },
            _get_parent: function(g) {
                g = this._get_node(g);
                if (g == -1 || !g.length) {
                    return false
                }
                var h = g.parentsUntil(".jstree", "li:eq(0)");
                return h.length ? h : -1
            },
            get_children: function(g) {
                return this._get_children(g)
            },
            _get_children: function(g) {
                g = this._get_node(g);
                if (g === -1) {
                    return this.get_container().children("ul:eq(0)").children("li")
                }
                if (!g.length) {
                    return false
                }
                return g.children("ul:eq(0)").children("li")
            },
            get_path: function(i, g) {
                var h = [],
                    j = this;
                i = this._get_node(i);
                if (i === -1 || !i || !i.length) {
                    return false
                }
                i.parentsUntil(".jstree", "li").each(function() {
                    h.push(g ? this.id : j.get_text(this))
                });
                h.reverse();
                h.push(g ? i.attr("id") : this.get_text(i));
                return h
            },
            is_open: function(g) {
                g = this._get_node(g);
                return g && g !== -1 && g.hasClass("jstree-open")
            },
            is_closed: function(g) {
                g = this._get_node(g);
                return g && g !== -1 && g.hasClass("jstree-closed")
            },
            is_leaf: function(g) {
                g = this._get_node(g);
                return g && g !== -1 && g.hasClass("jstree-leaf")
            },
            _before_open_node: function(g) {
                g = this._get_node(g);
                var h = this._get_settings().core;
                if (h.beforeOpenNodeFn) {
                    h.beforeOpenNodeFn.call(this, g)
                }
            },
            open_node: function(j, k, h) {
                j = this._get_node(j);
                if (!j.length) {
                    return false
                }
                if (!j.hasClass("jstree-closed")) {
                    if (k) {
                        k.call()
                    }
                    return false
                }
                var i = h || d ? 0 : this._get_settings().core.animation,
                    g = this;
                if (!this._is_loaded(j) && !j.data("isRequested")) {
                    j.children("a").addClass("jstree-loading");
                    this._before_open_node(j);
                    this.load_node(j, function() {
                        g.open_node(j, k, h)
                    }, k);
                    j.data("isRequested", true)
                } else {
                    if (this._get_settings().json_data.data) {
                        this._before_open_node(j)
                    }
                    if (i) {
                        j.children("ul").css("display", "none")
                    }
                    j.removeClass("jstree-closed").addClass("jstree-open").children("a").removeClass("jstree-loading").children("ins.jstree-icon").removeClass("jstree-leaf-icon").addClass("jstree-open-icon");
                    if (i) {
                        if (j.children("ul") && j.children("ul").length > 0) {
                            j.children("ul").each(function() {
                                this.style.display = ""
                            })
                        }
                    }
                    this.__callback({
                        obj: j
                    });
                    if (k) {
                        k.call()
                    }
                }
            },
            close_node: function(i, g) {
                i = this._get_node(i);
                var h = g || d ? 0 : this._get_settings().core.animation;
                if (!i.length || !i.hasClass("jstree-open")) {
                    return false
                }
                if (h) {
                    i.children("ul").attr("style", "display:block !important")
                }
                i.removeClass("jstree-open").addClass("jstree-closed").children("a").find("ins").each(function() {
                    if (e(this).hasClass("jstree-open-icon")) {
                        e(this).removeClass("jstree-open-icon")
                    }
                });
                if (h) {
                    if (i.children("ul") && i.children("ul").length > 0) {
                        i.children("ul").each(function() {
                            this.style.display = ""
                        })
                    }
                }
                this.__callback({
                    obj: i
                })
            },
            toggle_node: function(g) {
                g = this._get_node(g);
                if (g.hasClass("jstree-closed")) {
                    return this.open_node(g)
                }
                if (g.hasClass("jstree-open")) {
                    return this.close_node(g)
                }
            },
            open_all: function(h, g) {
                h = h ? this._get_node(h) : this.get_container();
                if (!h || h === -1) {
                    h = this.get_container()
                }
                if (g) {
                    h = h.find("li.jstree-closed")
                } else {
                    g = h;
                    if (h.is(".jstree-closed")) {
                        h = h.find("li.jstree-closed").andSelf()
                    } else {
                        h = h.find("li.jstree-closed")
                    }
                }
                var i = this;
                h.each(function() {
                    var j = this;
                    if (!i._is_loaded(this)) {
                        i.open_node(this, function() {
                            i.open_all(j, g)
                        }, true)
                    } else {
                        i.open_node(this, false, true)
                    }
                });
                if (g.find("li.jstree-closed").length === 0) {
                    this.__callback({
                        obj: g
                    })
                }
            },
            close_all: function(g) {
                var h = this;
                g = g ? this._get_node(g) : this.get_container();
                if (!g || g === -1) {
                    g = this.get_container()
                }
                g.find("li.jstree-open").andSelf().each(function() {
                    h.close_node(this)
                });
                this.__callback({
                    obj: g
                })
            },
            clean_node: function(g) {
                g = g && g != -1 ? e(g) : this.get_container();
                g = g.is("li") ? g.find("li").andSelf() : g.find("li");
                g.removeClass("jstree-last").filter("li:last-child").addClass("jstree-last").end().filter(":has(li)").not(".jstree-open").removeClass("jstree-leaf").addClass("jstree-closed");
                g.not(".jstree-open, .jstree-closed").addClass("jstree-leaf").children("ul").remove();
                this.__callback({
                    obj: g
                })
            },
            get_rollback: function() {
                this.__callback();
                return {
                    i: this.get_index(),
                    h: this.get_container().children("ul").clone(true),
                    d: this.data
                }
            },
            set_rollback: function(g, h) {
                this.get_container().empty().append(g);
                this.data = h;
                this.__callback()
            },
            load_node: function(i, g, h) {
                this.__callback({
                    obj: i
                })
            },
            _is_loaded: function(g) {
                return true
            },
            create_node: function(k, h, j, m, i, g) {
                k = this._get_node(k);
                h = typeof h === "undefined" ? "last" : h;
                if (k !== -1 && !k.length) {
                    return false
                }
                if (!i && !this._is_loaded(k)) {
                    this.load_node(k, function() {
                        this.create_node(k, h, j, m, true)
                    });
                    return false
                }
                this.__rollback();
                var l = this._parse_json(j, true);
                l = e(l.join(""));
                if (k === -1) {
                    k = this.get_container();
                    if (h === "before") {
                        h = "first"
                    }
                    if (h === "after") {
                        h = "last"
                    }
                }
                switch (h) {
                    case "before":
                        k.before(l);
                        tmp = this._get_parent(k);
                        break;
                    case "after":
                        k.after(l);
                        tmp = this._get_parent(k);
                        break;
                    case "inside":
                    case "first":
                        if (!k.children("ul").length) {
                            k.append("<ul>")
                        }
                        k.children("ul").prepend(l);
                        tmp = k;
                        break;
                    case "last":
                        if (!k.children("ul").length) {
                            k.append("<ul>")
                        }
                        k.children("ul").append(l);
                        tmp = k;
                        break;
                    default:
                        if (!k.children("ul").length) {
                            k.append("<ul>")
                        }
                        if (!h) {
                            h = 0
                        }
                        tmp = k.children("ul").children("li").eq(h);
                        if (tmp.length) {
                            tmp.before(l)
                        } else {
                            k.children("ul").append(l)
                        }
                        tmp = k;
                        break
                }
                if (tmp === -1 || tmp.get(0) === this.get_container().get(0)) {
                    tmp = -1
                }
                this.clean_node(tmp);
                if (g) {
                    this.__callback({
                        obj: l,
                        parent: tmp
                    })
                } else {
                    this.__callback({
                        obj: l,
                        parent: tmp
                    }, {
                        nocall_jstree: true
                    })
                }
                l.data("__this", this);
                if (m) {
                    m.call(this, l)
                }
                return l
            },
            get_text: function(h) {
                h = this._get_node(h);
                if (!h.length) {
                    return false
                }
                var g = this._get_settings().core.html_titles;
                h = h.children("a:eq(0)");
                if (g) {
                    h = h.clone();
                    h.children("INS").remove();
                    return h.html()
                } else {
                    h = h.contents().filter(function() {
                        return this.nodeType == 3
                    })[0];
                    return h.nodeValue
                }
            },
            set_text: function(h, i) {
                h = this._get_node(h);
                if (!h.length) {
                    return false
                }
                h = h.children("a:eq(0)");
                h.attr("title", i);
                if (this._get_settings().core.html_titles) {
                    var g = h.children("INS").clone();
                    h.html(i).prepend(g);
                    this.__callback({
                        obj: h,
                        name: i
                    });
                    return true
                } else {
                    h = h.contents().filter(function() {
                        return this.nodeType == 3
                    })[0];
                    this.__callback({
                        obj: h,
                        name: i
                    });
                    return (h.nodeValue = i)
                }
            },
            rename_node: function(h, i, g) {
                h = this._get_node(h);
                this.__rollback();
                if (h && h.length && this.set_text.apply(this, Array.prototype.slice.call(arguments))) {
                    h.attr("text", i);
                    this.__callback({
                        obj: h,
                        name: i
                    }, {
                        nocall_jstree: g && g.nocall_jstree
                    })
                }
            },
            delete_node: function(k) {
                k = this._get_node(k);
                if (!k.length) {
                    return false
                }
                var h = this._get_settings().core;
                if (h.beforeDeleteNodeFn) {
                    var g = h.beforeDeleteNodeFn.call(this, k);
                    if (!g) {
                        return false
                    }
                }
                this.__rollback();
                var j = this._get_parent(k),
                    i = this._get_prev(k);
                k = k.remove();
                if (j !== -1 && j.find("> ul > li").length === 0) {
                    j.removeClass("jstree-open jstree-closed").addClass("jstree-leaf");
                    j.children("a").children("ins.jstree-icon").removeClass("jstree-open-icon")
                }
                this.clean_node(j);
                this.__callback({
                    obj: k,
                    prev: i
                });
                return k
            },
            prepare_move: function(k, i, l, g, h) {
                var j = {};
                j.ot = e.jstree._reference(j.o) || this;
                j.o = j.ot._get_node(k);
                j.r = i === -1 ? -1 : this._get_node(i);
                j.p = (typeof j === "undefined") ? "last" : l;
                if (!h && a.o && a.o[0] === j.o[0] && a.r[0] === j.r[0] && a.p === j.p) {
                    this.__callback(a);
                    if (g) {
                        g.call(this, a)
                    }
                    return
                }
                j.ot = e.jstree._reference(j.o) || this;
                j.rt = i === -1 ? j.ot : e.jstree._reference(j.r) || this;
                if (j.r === -1) {
                    j.cr = -1;
                    switch (j.p) {
                        case "first":
                        case "before":
                        case "inside":
                            j.cp = 0;
                            break;
                        case "after":
                        case "last":
                            j.cp = j.rt.get_container().find(" > ul > li").length;
                            break;
                        default:
                            j.cp = j.p;
                            break
                    }
                } else {
                    if (!/^(before|after)$/.test(j.p) && !this._is_loaded(j.r)) {
                        return this.load_node(j.r, function() {
                            this.prepare_move(k, i, l, g, true)
                        })
                    }
                    switch (j.p) {
                        case "before":
                            j.cp = j.r.index();
                            j.cr = j.rt._get_parent(j.r);
                            break;
                        case "after":
                            j.cp = j.r.index() + 1;
                            j.cr = j.rt._get_parent(j.r);
                            break;
                        case "inside":
                        case "first":
                            j.cp = 0;
                            j.cr = j.r;
                            break;
                        case "last":
                            j.cp = j.r.find(" > ul > li").length;
                            j.cr = j.r;
                            break;
                        default:
                            j.cp = j.p;
                            j.cr = j.r;
                            break
                    }
                }
                j.np = j.cr == -1 ? j.rt.get_container() : j.cr;
                j.op = j.ot._get_parent(j.o);
                j.or = j.np.find(" > ul > li:nth-child(" + (j.cp + 1) + ")");
                a = j;
                this.__callback(a);
                if (g) {
                    g.call(this, a)
                }
            },
            check_move: function() {
                var h = a,
                    g = true;
                if (h.or[0] === h.o[0]) {
                    return false
                }
                h.o.each(function() {
                    if (h.r.parentsUntil(".jstree").andSelf().filter("li").index(this) !== -1) {
                        g = false;
                        return false
                    }
                });
                return g
            },
            move_node: function(m, j, g, i, h, l) {
                if (!h) {
                    return this.prepare_move(m, j, g, function(o) {
                        this.move_node(o, false, false, i, true, l)
                    })
                }
                if (!l && !this.check_move()) {
                    return false
                }
                this.__rollback();
                var n = false;
                if (i) {
                    n = m.o.clone();
                    n.find("*[id]").andSelf().each(function() {
                        if (this.id) {
                            this.id = "copy_" + this.id
                        }
                    })
                } else {
                    n = m.o
                }
                if (m.or.length) {
                    m.or.before(n)
                } else {
                    if (!m.np.children("ul").length) {
                        e("<ul>").appendTo(m.np)
                    }
                    m.np.children("ul:eq(0)").append(n)
                }
                try {
                    m.ot.clean_node(m.op);
                    m.rt.clean_node(m.np);
                    if (!m.op.find("> ul > li").length) {
                        m.op.removeClass("jstree-open jstree-closed").addClass("jstree-leaf").children("ul").remove();
                        m.op.children("a").children("ins.jstree-icon").removeClass("jstree-open-icon")
                    }
                } catch (k) {}
                if (i) {
                    a.cy = true;
                    a.oc = n
                }
                this.__callback(a);
                return a
            },
            _get_move: function() {
                return a
            }
        }
    })
})(jQuery);
(function(a) {
    a.jstree.plugin("ui", {
        __init: function() {
            this.data.ui.selected = a();
            this.data.ui.last_selected = false;
            this.data.ui.hovered = null;
            this.data.ui.to_select = this.get_settings().ui.initially_select;
            this.get_container().delegate("a", "click.jstree", a.proxy(function(b) {
                b.preventDefault();
                this.select_node(b.currentTarget, true, b);
                this.click_node(b.currentTarget)
            }, this)).delegate("a", "dblclick.jstree", a.proxy(function(b) {
                b.preventDefault();
                this.dblclick_node(b.currentTarget)
            }, this)).delegate("a", "contextmenu.jstree", a.proxy(function(b) {
                b.preventDefault();
                this.select_node(b.currentTarget, true, b)
            }, this)).delegate("a", "mouseenter.jstree", a.proxy(function(b) {
                this.hover_node(b.target)
            }, this)).delegate("a", "mouseleave.jstree", a.proxy(function(b) {
                this.dehover_node(b.target)
            }, this)).bind("reopen.jstree", a.proxy(function() {
                this.reselect()
            }, this)).bind("get_rollback.jstree", a.proxy(function() {
                this.dehover_node();
                this.save_selected()
            }, this)).bind("set_rollback.jstree", a.proxy(function() {
                this.reselect()
            }, this)).bind("close_node.jstree", a.proxy(function(c, d) {
                var b = this._get_settings().ui,
                    e = this._get_node(d.rslt.obj),
                    f = (e && e.length) ? e.children("ul").find(".jstree-clicked") : a(),
                    g = this;
                if (b.selected_parent_close === false || !f.length) {
                    return
                }
                f.each(function() {
                    g.deselect_node(this);
                    if (b.selected_parent_close === "select_parent") {
                        g.select_node(e)
                    }
                })
            }, this)).bind("delete_node.jstree", a.proxy(function(c, d) {
                var b = this._get_settings().ui.select_prev_on_delete,
                    e = this._get_node(d.rslt.obj),
                    f = (e && e.length) ? e.find(".jstree-clicked") : [],
                    g = this;
                f.each(function() {
                    g.deselect_node(this)
                });
                if (b && f.length) {
                    this.select_node(d.rslt.prev)
                }
            }, this)).bind("move_node.jstree", a.proxy(function(b, c) {
                if (c.rslt.cy) {
                    c.rslt.oc.find(".jstree-clicked").removeClass("jstree-clicked")
                }
            }, this))
        },
        defaults: {
            select_limit: -1,
            select_multiple_modifier: "ctrl",
            selected_parent_close: "select_parent",
            select_prev_on_delete: true,
            disable_selecting_children: false,
            initially_select: []
        },
        _fn: {
            _get_node: function(b, c) {
                if (typeof b === "undefined" || b === null) {
                    return c ? this.data.ui.selected : this.data.ui.last_selected
                }
                var d = a(b, this.get_container());
                if (d.is(".jstree") || b == -1) {
                    return -1
                }
                d = d.closest("li", this.get_container());
                return d.length ? d : false
            },
            save_selected: function() {
                var b = this;
                this.data.ui.to_select = [];
                this.data.ui.selected.each(function() {
                    b.data.ui.to_select.push("#" + this.id.toString().replace(/^#/, "").replace("\\/", "/").replace("/", "\\/"))
                });
                this.__callback(this.data.ui.to_select)
            },
            reselect: function() {
                var c = this,
                    b = this.data.ui.to_select;
                b = a.map(a.makeArray(b), function(d) {
                    return "#" + d.toString().replace(/^#/, "").replace("\\/", "/").replace("/", "\\/")
                });
                this.deselect_all();
                a.each(b, function(d, e) {
                    if (e && e !== "#") {
                        c.select_node(e)
                    }
                });
                this.__callback()
            },
            refresh: function(b) {
                this.save_selected();
                return this.__call_old()
            },
            hover_node: function(b) {
                b = this._get_node(b);
                if (!b.length) {
                    return false
                }
                if (!b.hasClass("jstree-hovered")) {
                    this.dehover_node()
                }
                this.data.ui.hovered = b.children("a").addClass("jstree-hovered").parent();
                this.__callback({
                    obj: b
                })
            },
            dehover_node: function() {
                var c = this.data.ui.hovered,
                    b;
                if (!c || !c.length) {
                    return false
                }
                b = c.children("a").removeClass("jstree-hovered").parent();
                if (this.data.ui.hovered[0] === b[0]) {
                    this.data.ui.hovered = null
                }
                this.__callback({
                    obj: c
                })
            },
            select_node: function(h, b, g) {
                h = this._get_node(h);
                if (h == -1 || !h || !h.length) {
                    return false
                }
                var d = this._get_settings().ui,
                    c = (d.select_multiple_modifier == "on" || (d.select_multiple_modifier !== false && g && g[d.select_multiple_modifier + "Key"])),
                    i = this.is_selected(h),
                    f = true;
                if (b) {
                    if (d.disable_selecting_children && c && h.parents("li", this.get_container()).children(".jstree-clicked").length) {
                        return false
                    }
                    f = false;
                    switch (!0) {
                        case (i && !c):
                            this.deselect_all();
                            i = false;
                            f = true;
                            break;
                        case (!i && !c):
                            if (d.select_limit == -1 || d.select_limit > 0) {
                                this.deselect_all();
                                f = true
                            }
                            break;
                        case (i && c):
                            this.deselect_node(h);
                            break;
                        case (!i && c):
                            if (d.select_limit == -1 || this.data.ui.selected.length + 1 <= d.select_limit) {
                                f = true
                            }
                            break
                    }
                }
                if (f && !i) {
                    h.children("a").addClass("jstree-clicked");
                    this.data.ui.selected = this.data.ui.selected.add(h);
                    this.data.ui.last_selected = h;
                    this.__callback({
                        obj: h
                    })
                }
            },
            click_node: function(b) {
                b = this._get_node(b);
                if (b == -1 || !b || !b.length) {
                    return false
                }
                this.__callback({
                    obj: b
                })
            },
            dblclick_node: function(b) {
                b = this._get_node(b);
                if (b == -1 || !b || !b.length) {
                    return false
                }
                this.__callback({
                    obj: b
                })
            },
            deselect_node: function(b) {
                b = this._get_node(b);
                if (!b.length) {
                    return false
                }
                if (this.is_selected(b)) {
                    b.children("a").removeClass("jstree-clicked");
                    this.data.ui.selected = this.data.ui.selected.not(b);
                    if (this.data.ui.last_selected.get(0) === b.get(0)) {
                        this.data.ui.last_selected = this.data.ui.selected.eq(0)
                    }
                    this.__callback({
                        obj: b
                    })
                }
            },
            toggle_select: function(b) {
                b = this._get_node(b);
                if (!b.length) {
                    return false
                }
                if (this.is_selected(b)) {
                    this.deselect_node(b)
                } else {
                    this.select_node(b)
                }
            },
            is_selected: function(b) {
                return this.data.ui.selected.index(this._get_node(b)) >= 0
            },
            get_selected: function(b) {
                return b ? a(b).find(".jstree-clicked").parent() : this.data.ui.selected
            },
            deselect_all: function(b) {
                if (b) {
                    a(b).find(".jstree-clicked").removeClass("jstree-clicked")
                } else {
                    this.get_container().find(".jstree-clicked").removeClass("jstree-clicked")
                }
                this.data.ui.selected = a([]);
                this.data.ui.last_selected = false;
                this.__callback()
            },
            doCircle: function(c) {
                var b = {};
                for (var d in c) {
                    var e = c[d];
                    if (e._disabled == undefined) {
                        e._disabled = false
                    }
                    if (e._class == undefined) {
                        e._class = false
                    }
                    if (e.separator_before == undefined) {
                        e.separator_before = false
                    }
                    if (e.separator_after == undefined) {
                        e.separator_after = false
                    }
                    if (e._display == undefined) {
                        e._display = true
                    }
                    if (e.icon == undefined) {
                        e.icon = "jstree-contextmenu-create-icon"
                    }
                    if (e.submenu) {
                        e.submenu = this.doCircle(e.submenu)
                    }
                    b[d] = e
                }
                return b
            }
        }
    });
    a.jstree.defaults.plugins.push("ui")
})(jQuery);
(function(a) {
    a.jstree.plugin("crrm", {
        __init: function() {
            this.get_container().bind("move_node.jstree", a.proxy(function(d, c) {
                if (this._get_settings().crrm.move.open_onmove) {
                    var b = this;
                    c.rslt.np.parentsUntil(".jstree").andSelf().filter(".jstree-closed").each(function() {
                        b.open_node(this, false, true)
                    })
                }
            }, this))
        },
        defaults: {
            input_width_limit: 200,
            move: {
                always_copy: false,
                open_onmove: true,
                default_position: "last",
                check_move: function(b) {
                    return true
                }
            }
        },
        _fn: {
            _show_input: function(b, j, c) {
                b = this._get_node(b);
                var h = this._get_settings().core.rtl,
                    i = this._get_settings().crrm.input_width_limit,
                    e = b.children("ins").width(),
                    d = b.find("> a:visible > ins").width() * b.find("> a:visible > ins").length,
                    k = this.get_text(b),
                    g = a("<div>", {
                        css: {
                            position: "absolute",
                            top: "-200px",
                            left: (h ? "0px" : "-1000px"),
                            visibility: "hidden"
                        }
                    }).appendTo("body"),
                    f = b.css("position", "relative").append(a("<input>", {
                        value: k,
                        css: {
                            padding: "0",
                            border: "1px solid silver",
                            position: "absolute",
                            left: (h ? "auto" : (e + d + 4) + "px"),
                            right: (h ? (e + d + 4) + "px" : "auto"),
                            top: "0px",
                            height: (this.data.core.li_height - 2) + "px",
                            lineHeight: (this.data.core.li_height - 2) + "px",
                            width: "150px"
                        },
                        blur: a.proxy(function() {
                            var m = b.children("input"),
                                l = m.val();
                            if (l === "") {
                                l = k
                            }
                            m.remove();
                            this.set_text(b, k);
                            var o = this.rename_node(b, l, {
                                nocall_jstree: c && c.nocall_jstree || (l == k)
                            });
                            if (o === false && (c && c.nocall_jstree)) {
                                b.remove();
                                return
                            } else {
                                j.call(this, b, l, k)
                            }
                            b.css("position", "");
                            var n = this._get_settings().dnd;
                            if (n) {
                                a(document).unbind("mousemove", a.vakata.dnd.drag);
                                a(document).unbind("mouseup", a.vakata.dnd.drag_stop)
                            }
                        }, this),
                        keyup: function(m) {
                            var l = m.keyCode || m.which;
                            if (l == 27) {
                                this.value = k;
                                this.blur();
                                return
                            } else {
                                if (l == 13) {
                                    this.blur();
                                    return
                                } else {
                                    f.width(Math.min(g.text("pW" + this.value).width(), i))
                                }
                            }
                        }
                    })).children("input");
                this.set_text(b, "");
                g.css({
                    fontFamily: f.css("fontFamily") || "",
                    fontSize: f.css("fontSize") || "",
                    fontWeight: f.css("fontWeight") || "",
                    fontStyle: f.css("fontStyle") || "",
                    fontStretch: f.css("fontStretch") || "",
                    fontVariant: f.css("fontVariant") || "",
                    letterSpacing: f.css("letterSpacing") || "",
                    wordSpacing: f.css("wordSpacing") || ""
                });
                f.width(Math.min(g.text("pW" + f[0].value).width(), i))[0].select()
            },
            rename: function(g, e, b) {
                g = this._get_node(g);
                this.__rollback();
                var d = this.__callback;
                if (!b) {
                    this._show_input(g, function(i, h, f) {
                        i.attr("text", this.get_text(i));
                        d.call(this, {
                            obj: i,
                            new_name: h,
                            old_name: f
                        })
                    })
                } else {
                    var c = this.get_text(g);
                    this.rename_node(g, e);
                    d.call(this, {
                        obj: g,
                        new_name: e,
                        old_name: c
                    })
                }
            },
            create: function(g, c, f, i, b) {
                var d, h = this,
                    e = this._get_settings().json_data;
                g = this._get_node(g);
                if (!g) {
                    g = -1
                }
                this.__rollback();
                d = this.create_node(g, c, f, function(j) {
                    var l = this._get_parent(j),
                        m = a(j).index();
                    var k = j.data("__this");
                    j.removeData("__this");
                    if (i) {
                        i.call(this, j)
                    }
                    if (e.renderNode) {
                        h.render_node(j)
                    }
                    if (l.length && l.hasClass("jstree-closed")) {
                        this.open_node(l, false, true)
                    }
                    if (!b) {
                        this._show_input(j, function(p, o, n) {
                            p.attr("text", this.get_text(p));
                            h.__callback({
                                obj: p,
                                name: o,
                                parent: l,
                                position: m
                            });
                            k.__callback({
                                obj: j,
                                parent: l
                            })
                        }, {
                            nocall_jstree: true
                        })
                    } else {
                        h.__callback({
                            obj: j,
                            name: this.get_text(j),
                            parent: l,
                            position: m
                        })
                    }
                }, null, b);
                return d
            },
            remove: function(c) {
                c = this._get_node(c, true);
                this.__rollback();
                if (c) {
                    var b = this.delete_node(c);
                    if (b) {
                        this.__callback({
                            obj: c
                        })
                    }
                }
            },
            check_move: function() {
                if (!this.__call_old()) {
                    return false
                }
                var b = this._get_settings().crrm.move;
                if (!b.check_move.call(this, this._get_move())) {
                    return false
                }
                return true
            },
            move_node: function(h, f, b, d, c, g) {
                var e = this._get_settings().crrm.move;
                if (!c) {
                    if (!b) {
                        b = e.default_position
                    }
                    if (b === "inside" && !e.default_position.match(/^(before|after)$/)) {
                        b = e.default_position
                    }
                    return this.__call_old(true, h, f, b, d, false, g)
                }
                if (e.always_copy === true || (e.always_copy === "multitree" && h.rt.get_index() !== h.ot.get_index())) {
                    d = true
                }
                this.__call_old(true, h, f, b, d, true, g)
            },
            cut: function(b) {
                b = this._get_node(b);
                this.data.crrm.cp_nodes = false;
                this.data.crrm.ct_nodes = false;
                if (!b || !b.length) {
                    return false
                }
                this.data.crrm.ct_nodes = b
            },
            copy: function(b) {
                b = this._get_node(b);
                this.data.crrm.cp_nodes = false;
                this.data.crrm.ct_nodes = false;
                if (!b || !b.length) {
                    return false
                }
                this.data.crrm.cp_nodes = b
            },
            paste: function(b) {
                b = this._get_node(b);
                if (!b || !b.length) {
                    return false
                }
                if (!this.data.crrm.ct_nodes && !this.data.crrm.cp_nodes) {
                    return false
                }
                if (this.data.crrm.ct_nodes) {
                    this.move_node(this.data.crrm.ct_nodes, b)
                }
                if (this.data.crrm.cp_nodes) {
                    this.move_node(this.data.crrm.cp_nodes, b, false, true)
                }
                this.data.crrm.cp_nodes = false;
                this.data.crrm.ct_nodes = false
            }
        }
    });
    a.jstree.defaults.plugins.push("crrm")
})(jQuery);
(function(a) {
    var b = [];
    a.jstree._themes = false;
    a.jstree.plugin("themes", {
        __init: function() {
            this.get_container().bind("init.jstree", a.proxy(function() {
                var c = this._get_settings().themes;
                this.data.themes.dots = c.dots;
                this.data.themes.icons = c.icons;
                this.set_theme(c.theme, c.url)
            }, this)).bind("loaded.jstree", a.proxy(function() {
                if (!this.data.themes.dots) {
                    this.hide_dots()
                } else {
                    this.show_dots()
                }
                if (!this.data.themes.icons) {
                    this.hide_icons()
                } else {
                    this.show_icons()
                }
            }, this))
        },
        defaults: {
            theme: "default",
            url: false,
            dots: true,
            icons: true
        },
        _fn: {
            set_theme: function(d, c) {
                if (!d) {
                    return false
                }
                if (!c) {
                    c = a.jstree._themes + d + "/style.css"
                }
                if (a.inArray(c, b) == -1) {
                    a.vakata.css.add_sheet({
                        url: c,
                        rel: "jstree"
                    });
                    b.push(c)
                }
                if (this.data.themes.theme != d) {
                    this.get_container().removeClass("jstree-" + this.data.themes.theme);
                    this.data.themes.theme = d
                }
                this.get_container().addClass("jstree-" + d);
                if (!this.data.themes.dots) {
                    this.hide_dots()
                } else {
                    this.show_dots()
                }
                if (!this.data.themes.icons) {
                    this.hide_icons()
                } else {
                    this.show_icons()
                }
                this.__callback()
            },
            get_theme: function() {
                return this.data.themes.theme
            },
            show_dots: function() {
                this.data.themes.dots = true;
                this.get_container().children("ul").removeClass("jstree-no-dots")
            },
            hide_dots: function() {
                this.data.themes.dots = false;
                this.get_container().children("ul").addClass("jstree-no-dots")
            },
            toggle_dots: function() {
                if (this.data.themes.dots) {
                    this.hide_dots()
                } else {
                    this.show_dots()
                }
            },
            show_icons: function() {
                this.data.themes.icons = true;
                this.get_container().children("ul").removeClass("jstree-no-icons")
            },
            hide_icons: function() {
                this.data.themes.icons = false;
                this.get_container().children("ul").addClass("jstree-no-icons")
            },
            toggle_icons: function() {
                if (this.data.themes.icons) {
                    this.hide_icons()
                } else {
                    this.show_icons()
                }
            }
        }
    });
    a(function() {
        if (a.jstree._themes === false) {
            a("script").each(function() {
                if (this.src.toString().match(/jquery\.jstree[^\/]*?\.js(\?.*)?$/)) {
                    a.jstree._themes = this.src.toString().replace(/jquery\.jstree[^\/]*?\.js(\?.*)?$/, "") + "themes/";
                    return false
                }
            })
        }
        if (a.jstree._themes === false) {
            a.jstree._themes = "themes/"
        }
    });
    a.jstree.defaults.plugins.push("themes")
})(jQuery);
(function(a) {
    a.jstree.plugin("json_data", {
        defaults: {
            data: false,
            ajax: false,
            correct_state: true,
            progressive_render: false
        },
        _fn: {
            load_node: function(d, b, c) {
                this._get_settings().json_data.nodesConfig = this._get_settings().types.types;
                var e = this;
                this.load_node_json(d, function() {
                    e.__callback({
                        obj: d
                    });
                    b.call(this)
                }, c)
            },
            _is_loaded: function(c) {
                var b = this._get_settings().json_data,
                    e;
                c = this._get_node(c);
                if (c && c !== -1 && b.progressive_render && !c.is(".jstree-open, .jstree-leaf") && c.children("ul").children("li").length === 0 && c.data("jstree-children")) {
                    e = this._parse_json(c.data("jstree-children"));
                    if (e) {
                        c.append(e);
                        a.removeData(c, "jstree-children")
                    }
                    this.clean_node(c);
                    return true
                }
                return c == -1 || !c || !b.ajax || c.is(".jstree-open, .jstree-leaf") || c.children("ul").children("li").size() > 0
            },
            _execute_jsondata: function(e) {
                var c = this._get_settings().json_data;
                var f = e.resultID;
                var b = e.resultMsg;
                if (f) {
                    if (f == c.successResultID) {
                        return true
                    } else {
                        if (c.showErrorMsg) {
                            alert(b)
                        }
                        return false
                    }
                } else {
                    alert(c.errormsg);
                    return false
                }
            },
            getDataProps: function() {
                var b = this._get_settings().json_data.props;
                return b
            },
            setDataProps: function(f) {
                var e = this._get_settings().json_data;
                var d = "_NLTREE_",
                    b = "";
                for (var c = 0; c < e.props.length; c++) {
                    b = d + b + d
                }
                for (var c = 0; c < f.length; c++) {
                    if (b.indexOf(d + f[c] + d) == -1 && f[c] != "children") {
                        e.props.push(f[c])
                    }
                }
            },
            _setDataProps: function(h) {
                var f = this._get_settings().json_data;
                var j = h[0],
                    e = "_NLTREE_",
                    b = "";
                for (var c = 0; c < f.props.length; c++) {
                    b = e + b + e
                }
                for (var g in j) {
                    if (b.indexOf(e + g + e) == -1 && g != "children") {
                        f.props.push(g)
                    }
                }
            },
            load_node_json: function(h, b, e) {
                var g = this.get_settings().json_data,
                    j, c = function() {},
                    i = function() {};
                h = this._get_node(h);
                if (h && h !== -1) {
                    if (h.data("jstree-is-loading")) {
                        return
                    } else {
                        h.data("jstree-is-loading", true)
                    }
                }
                switch (!0) {
                    case (!g.data && !g.ajax):
                        alert("\u672a\u8bbe\u7f6e\u6570\u636e\u6e90!");
                        return false;
                    case (!!g.data && !g.ajax) || (!!g.data && !!g.ajax && (!h || h === -1)):
                        if (!h || h == -1) {
                            this._setDataProps(g.data);
                            j = this._parse_json(g.data);
                            if (j) {
                                this.get_container().children("ul").empty().append(a(j.join("")).children());
                                this.clean_node();
                                this._render_node()
                            } else {
                                if (g.correct_state) {
                                    this.get_container().children("ul").empty()
                                }
                            }
                        }
                        if (b) {
                            b.call(this)
                        }
                        break;
                    case (!g.data && !!g.ajax) || (!!g.data && !!g.ajax && h && h !== -1):
                        c = function(k, l, m) {
                            var d = this.get_settings().json_data.ajax.error;
                            if (d) {
                                d.call(this, k, l, m)
                            }
                            alert(this._get_settings().json_data.errormsg);
                            if (h != -1 && h.length) {
                                h.children(".jstree-loading").removeClass("jstree-loading");
                                h.data("jstree-is-loading", false);
                                if (l === "success" && g.correct_state) {
                                    h.removeClass("jstree-open jstree-closed").addClass("jstree-leaf")
                                }
                            } else {
                                if (g.correct_state) {
                                    this.get_container().children("ul").empty()
                                }
                            }
                            if (e) {
                                e.call(this)
                            }
                        };
                        i = function(n, l, k) {
                            if (!this._execute_jsondata(n) || !n || !n.resultList || !n.resultList.length) {
                                if (h != -1 && h.length) {
                                    h.children(".jstree-loading").removeClass("jstree-loading");
                                    h.data("jstree-is-loading", false)
                                } else {
                                    if (g.correct_state) {
                                        this.get_container().children("ul").empty()
                                    }
                                }
                                return false
                            }
                            n = n.resultList;
                            var m = this.get_settings().json_data.ajax.success;
                            if (m) {
                                n = m.call(this, n, l, k) || n
                            }
                            if (n === "" || (!a.isArray(n) && !a.isPlainObject(n))) {
                                return c.call(this, k, l, "")
                            }
                            this._setDataProps(n);
                            n = this._parse_json(n);
                            if (n) {
                                if (h === -1 || !h) {
                                    this.get_container().children("ul").empty().append(a(n.join("")).children())
                                } else {
                                    h.append(n.join("")).children(".jstree-loading").removeClass("jstree-loading");
                                    h.data("jstree-is-loading", false)
                                }
                                this.clean_node(h);
                                if (b) {
                                    b.call(this)
                                }
                            } else {
                                if (h === -1 || !h) {
                                    if (g.correct_state) {
                                        this.get_container().children("ul").empty();
                                        if (b) {
                                            b.call(this)
                                        }
                                    }
                                } else {
                                    h.children(".jstree-loading").removeClass("jstree-loading");
                                    h.data("jstree-is-loading", false);
                                    if (g.correct_state) {
                                        h.removeClass("jstree-open jstree-closed").addClass("jstree-leaf");
                                        if (b) {
                                            b.call(this)
                                        }
                                    }
                                }
                            }
                        };
                        if (g.ajax.url) {
                            g.ajax.context = this;
                            g.ajax.error = c;
                            g.ajax.success = i;
                            if (!g.ajax.dataType) {
                                g.ajax.dataType = "json"
                            }
                            if (a.isFunction(g.ajax.url)) {
                                g.ajax.url = g.ajax.url.call(this, h)
                            }
                            if (a.isFunction(g.ajax.data)) {
                                g.ajax.data = g.ajax.data.call(this, h)
                            }
                            a.ajax(g.ajax)
                        } else {
                            if (g.ajax.ajaxDataFn) {
                                var f = g.ajax.ajaxDataFn.call(this, h);
                                if (f) {
                                    i.call(this, f, "success", "")
                                } else {
                                    return c.call(this, "", "error", "")
                                }
                            }
                        }
                        break
                }
            },
            _render_node: function(c) {
                var b = this._get_settings().json_data;
                var d = this;
                if (b.renderNode) {
                    c = c && c != -1 ? a(c) : this.get_container();
                    c = c.is("li") ? c.find("li").andSelf() : c.find("li");
                    c.each(function() {
                        var e = b.renderNode.call(d, a(this));
                        a(this).children("a").append(e)
                    })
                }
            },
            render_node: function(b) {
                this._render_node(b)
            },
            _parse_json: function(u, b) {
                var B = false,
                    r = this._get_settings(),
                    o = r.json_data,
                    n = r.core.html_titles,
                    w = r.core.attrMap,
                    C, z, y, k, h, l = [],
                    q = this.get_container().attr("id");
                if (!u) {
                    return B
                }
                if (a.isFunction(u)) {
                    u = u.call(this)
                }
                if (!b) {
                    l.push("<ul>")
                }
                if (a.isArray(u)) {
                    if (!u.length) {
                        return false
                    }
                    for (z = 0, y = u.length; z < y; z++) {
                        C = this._parse_json(u[z], true);
                        if (C.length) {
                            l.push(C.join(""))
                        }
                    }
                } else {
                    if (typeof u == "string") {
                        u = {
                            data: u
                        }
                    }
                    var e, f, g, x;
                    if (w && w.id && u[w.id]) {
                        e = u[w.id]
                    } else {
                        e = u.id
                    }
                    if (w && w.text && u[w.text]) {
                        f = u[w.text]
                    } else {
                        f = u.text
                    }
                    if (w && w.rel && u[w.rel]) {
                        g = u[w.rel]
                    } else {
                        g = u.rel
                    }
                    if (w && w.children && u[w.children]) {
                        x = u[w.children]
                    } else {
                        x = u.children
                    }
                    if (!f && f !== "") {
                        return B
                    }
                    l.push("<li");
                    for (var A in u) {
                        if ((A != (w && w.children ? w.children + "" : "children") && A != "children")) {
                            var m = u[A];
                            if (typeof(m) == "string") {
                                m = m.replace(/\</g, "&lt;").replace(/\>/g, "&gt;").replaceAll('"', "&quot;")
                            }
                            if (w) {
                                if (w.id && w.id == A || A == "id") {
                                    A = "id";
                                    m = q + "_" + m
                                }
                                if (w.text && w.text == A || A == "text") {
                                    A = "text"
                                }
                                if (w.rel && w.rel == A || A == "rel") {
                                    A = "rel"
                                }
                                l.push(" " + A + '="' + m + '" ')
                            } else {
                                l.push(" " + A + '="' + (A == "id" ? (q + "_" + m) : m) + '" ')
                            }
                        }
                    }
                    l.push(' class="');
                    if (u.state) {
                        l.push("jstree-" + u.state)
                    }
                    if (x) {
                        if (u.state !== "open") {
                            l.push(" jstree-closed")
                        }
                    }
                    l.push('">');
                    var c = [];
                    if (!a.isArray(f)) {
                        C = f;
                        c.push(C)
                    }
                    l.push('<ins class="jstree-icon">&#160;</ins>');
                    a.each(c, function(s, d) {
                        l.push("<a");
                        if (a.isFunction(d)) {
                            d = d.call(this, c)
                        }
                        if (typeof(d) == "string") {
                            d = d.replace(/\</g, "&lt;").replace(/\>/g, "&gt;").replaceAll('"', "&quot;")
                        }
                        l.push(' title="' + d + '"');
                        if (typeof d == "string") {
                            l.push(' href="#">')
                        } else {
                            if (!d.attr) {
                                d.attr = {}
                            }
                            if (!d.attr.href) {
                                d.attr.href = "#"
                            }
                            if (d.language) {
                                l.push(' class="' + d.language + '"')
                            }
                            l.push(' href="' + d.attr.href + '">')
                        }
                        var p = '<ins class="jstree-icon';
                        if (g && g == "leaf") {
                            p = p + " jstree-leaf-icon"
                        }
                        if (!d.icon && u.icon) {
                            d.icon = u.icon
                        }
                        if (!d.icon && !u.icon && o.nodesConfig && g) {
                            if (o.nodesConfig[g]) {
                                if (o.nodesConfig[g].icon) {
                                    if (o.nodesConfig[g].icon.image) {
                                        var j = o.nodesConfig[g].icon.image;
                                        if (j) {
                                            p = p + '" style="background: url(\'' + j + "') center center no-repeat;"
                                        }
                                    }
                                }
                            }
                        }
                        if (d.icon) {
                            if (d.icon.indexOf("/") === -1) {
                                p = p + " " + d.icon + '" '
                            } else {
                                p = p + '" style="background: url(\'' + d.icon + "') center center no-repeat;"
                            }
                        }
                        p = p + '">&#160;</ins>';
                        l.push(p);
                        l.push((typeof d == "string" ? d : d.title) + "</a>")
                    });
                    if (x) {
                        if (o.progressive_render && u.state !== "open") {} else {
                            if (a.isFunction(x)) {
                                x = x.call(this, u)
                            }
                            if (a.isArray(x) && x.length) {
                                C = this._parse_json(x, true);
                                if (C.length) {
                                    l.push("<ul>" + C.join("") + "</ul>")
                                }
                            }
                        }
                    }
                    l.push("</li>")
                }
                if (!b) {
                    l.push("</ul>")
                }
                return l
            },
            get_json: function(g, d, b, k) {
                var n = [],
                    m = this._get_settings(),
                    h = this,
                    f, e, j, i, l, c;
                g = this._get_node(g);
                if (!g || g === -1) {
                    g = this.get_container().find("> ul > li")
                }
                d = a.isArray(d) ? d : ["id", "class"];
                if (!k && this.data.types) {
                    d.push(m.types.type_attr)
                }
                b = a.isArray(b) ? b : [];
                g.each(function() {
                    j = a(this);
                    f = {
                        data: []
                    };
                    if (d.length) {
                        f.attr = {}
                    }
                    a.each(d, function(p, o) {
                        e = j.attr(o);
                        if (e && e.length && e.replace(/jstree[^ ]*|$/ig, "").length) {
                            f.attr[o] = e.replace(/jstree[^ ]*|$/ig, "")
                        }
                    });
                    if (j.hasClass("jstree-open")) {
                        f.state = "open"
                    }
                    if (j.hasClass("jstree-closed")) {
                        f.state = "closed"
                    }
                    i = j.children("a");
                    i.each(function() {
                        l = a(this);
                        if (b.length || a.inArray("languages", m.plugins) !== -1 || l.children("ins").get(0).style.backgroundImage.length || (l.children("ins").get(0).className && l.children("ins").get(0).className.replace(/jstree[^ ]*|$/ig, "").length)) {
                            c = false;
                            if (a.inArray("languages", m.plugins) !== -1 && a.isArray(m.languages) && m.languages.length) {
                                a.each(m.languages, function(o, p) {
                                    if (l.hasClass(p)) {
                                        c = p;
                                        return false
                                    }
                                })
                            }
                            e = {
                                attr: {},
                                title: h.get_text(l, c)
                            };
                            a.each(b, function(o, p) {
                                f.attr[p] = (l.attr(p) || "").replace(/jstree[^ ]*|$/ig, "")
                            });
                            a.each(m.languages, function(o, p) {
                                if (l.hasClass(p)) {
                                    e.language = p;
                                    return true
                                }
                            });
                            if (l.children("ins").get(0).className.replace(/jstree[^ ]*|$/ig, "").replace(/^\s+$/ig, "").length) {
                                e.icon = l.children("ins").get(0).className.replace(/jstree[^ ]*|$/ig, "").replace(/^\s+$/ig, "")
                            }
                            if (l.children("ins").get(0).style.backgroundImage.length) {
                                e.icon = l.children("ins").get(0).style.backgroundImage.replace("url(", "").replace(")", "")
                            }
                        } else {
                            e = h.get_text(l)
                        }
                        if (i.length > 1) {
                            f.data.push(e)
                        } else {
                            f.data = e
                        }
                    });
                    j = j.find("> ul > li");
                    if (j.length) {
                        f.children = h.get_json(j, d, b, true)
                    }
                    n.push(f)
                });
                return n
            }
        }
    })
})(jQuery);
(function(f) {
    var h = false,
        c = false,
        a = false,
        b = false,
        e = false,
        g = false,
        d = false;
    f.vakata.dnd = {
        is_down: false,
        is_drag: false,
        helper: false,
        scroll_spd: 10,
        init_x: 0,
        init_y: 0,
        threshold: 5,
        user_data: {},
        drag_start: function(l, k, i) {
            if (f.vakata.dnd.is_drag) {
                f.vakata.drag_stop({})
            }
            try {
                l.currentTarget.unselectable = "on";
                l.currentTarget.onselectstart = function() {
                    return false
                };
                if (l.currentTarget.style) {
                    l.currentTarget.style.MozUserSelect = "none"
                }
            } catch (j) {}
            f.vakata.dnd.init_x = l.pageX;
            f.vakata.dnd.init_y = l.pageY;
            f.vakata.dnd.user_data = k;
            f.vakata.dnd.is_down = true;
            f.vakata.dnd.helper = f("<div id='vakata-dragged'>").html(i).css("opacity", "0.75");
            f(document).bind("mousemove", f.vakata.dnd.drag);
            f(document).bind("mouseup", f.vakata.dnd.drag_stop);
            return false
        },
        drag: function(o) {
            if (!f.vakata.dnd.is_down) {
                return
            }
            if (!f.vakata.dnd.is_drag) {
                if (Math.abs(o.pageX - f.vakata.dnd.init_x) > 5 || Math.abs(o.pageY - f.vakata.dnd.init_y) > 5) {
                    f.vakata.dnd.helper.appendTo("body");
                    f.vakata.dnd.is_drag = true;
                    f(document).triggerHandler("drag_start.vakata", {
                        event: o,
                        data: f.vakata.dnd.user_data
                    })
                } else {
                    return
                }
            }
            if (o.type === "mousemove") {
                var q = f(document),
                    k = q.scrollTop(),
                    i = q.scrollLeft();
                if (o.pageY - k < 20) {
                    if (e && g === "down") {
                        clearInterval(e);
                        e = false
                    }
                    if (!e) {
                        g = "up";
                        e = setInterval(function() {
                            f(document).scrollTop(f(document).scrollTop() - f.vakata.dnd.scroll_spd)
                        }, 150)
                    }
                } else {
                    if (e && g === "up") {
                        clearInterval(e);
                        e = false
                    }
                }
                if (f(window).height() - (o.pageY - k) < 20) {
                    if (e && g === "up") {
                        clearInterval(e);
                        e = false
                    }
                    if (!e) {
                        g = "down";
                        e = setInterval(function() {
                            f(document).scrollTop(f(document).scrollTop() + f.vakata.dnd.scroll_spd)
                        }, 150)
                    }
                } else {
                    if (e && g === "down") {
                        clearInterval(e);
                        e = false
                    }
                }
                if (o.pageX - i < 20) {
                    if (b && d === "right") {
                        clearInterval(b);
                        b = false
                    }
                    if (!b) {
                        d = "left";
                        b = setInterval(function() {
                            f(document).scrollLeft(f(document).scrollLeft() - f.vakata.dnd.scroll_spd)
                        }, 150)
                    }
                } else {
                    if (b && d === "left") {
                        clearInterval(b);
                        b = false
                    }
                }
                if (f(window).width() - (o.pageX - i) < 20) {
                    if (b && d === "left") {
                        clearInterval(b);
                        b = false
                    }
                    if (!b) {
                        d = "right";
                        b = setInterval(function() {
                            f(document).scrollLeft(f(document).scrollLeft() + f.vakata.dnd.scroll_spd)
                        }, 150)
                    }
                } else {
                    if (b && d === "right") {
                        clearInterval(b);
                        b = false
                    }
                }
                var n = f.jstree._focused();
                var m = n._get_settings().dnd;
                if (m.dragConfig && m.dragConfig.forbidInnerDrag) {
                    var j = n.get_container();
                    var p = f(o.target).parents().filter(function() {
                        return f(this).attr("id") == j[0].id
                    });
                    if (p.length > 0) {
                        f.vakata.dnd.helper.children("ins").attr("class", "jstree-invalid")
                    } else {
                        if (m.dragConfig && (!m.dragConfig.dropAllow || m.dragConfig.dropAllow(f.vakata.dnd.user_data.obj, o.target))) {
                            f.vakata.dnd.helper.children("ins").attr("class", "jstree-ok")
                        } else {
                            f.vakata.dnd.helper.children("ins").attr("class", "jstree-invalid")
                        }
                    }
                }
            }
            f.vakata.dnd.helper.css({
                left: (o.pageX + 5) + "px",
                top: (o.pageY + 10) + "px"
            });
            f(document).triggerHandler("drag.vakata", {
                event: o,
                data: f.vakata.dnd.user_data
            })
        },
        drag_stop: function(l) {
            f(document).unbind("mousemove", f.vakata.dnd.drag);
            f(document).unbind("mouseup", f.vakata.dnd.drag_stop);
            f(document).triggerHandler("drag_stop.vakata", {
                event: l,
                data: f.vakata.dnd.user_data
            });
            var k = f.vakata.dnd.user_data;
            f.vakata.dnd.helper.remove();
            f.vakata.dnd.init_x = 0;
            f.vakata.dnd.init_y = 0;
            f.vakata.dnd.user_data = {};
            f.vakata.dnd.is_down = false;
            f.vakata.dnd.is_drag = false;
            var j = f.jstree._focused();
            var i = j._get_settings().dnd;
            if (i.dragConfig && i.dragConfig.dropAllow && !i.dragConfig.dropAllow(f.vakata.dnd.user_data.obj, l.target)) {
                return
            }
            if (i.dragConfig && i.dragConfig.dragStopFn) {
                i.dragConfig.dragStopFn.call(this, k.obj, l.target)
            }
            clearInterval(e)
        }
    };
    f(function() {
        var i = "#vakata-dragged { display:block; margin:0 0 0 0; padding:4px 4px 4px 24px; position:absolute; top:-2000px; line-height:16px; z-index:10000; } ";
        f.vakata.css.add_sheet({
            str: i
        })
    });
    f.jstree.plugin("dnd", {
        __init: function() {
            this.data.dnd = {
                active: false,
                after: false,
                inside: false,
                before: false,
                off: false,
                prepared: false,
                w: 0,
                to1: false,
                to2: false,
                cof: false,
                cw: false,
                ch: false,
                i1: false,
                i2: false
            };
            this.get_container().bind("mouseenter.jstree", f.proxy(function() {
                if (f.vakata.dnd.is_drag && f.vakata.dnd.user_data.jstree && this.data.themes) {
                    a.attr("class", "jstree-" + this.data.themes.theme);
                    f.vakata.dnd.helper.attr("class", "jstree-dnd-helper jstree-" + this.data.themes.theme)
                }
            }, this)).bind("mouseleave.jstree", f.proxy(function() {
                if (f.vakata.dnd.is_drag && f.vakata.dnd.user_data.jstree) {
                    if (this.data.dnd.i1) {
                        clearInterval(this.data.dnd.i1)
                    }
                    if (this.data.dnd.i2) {
                        clearInterval(this.data.dnd.i2)
                    }
                }
            }, this)).bind("mousemove.jstree", f.proxy(function(k) {
                if (f.vakata.dnd.is_drag && f.vakata.dnd.user_data.jstree) {
                    var j = this.get_container()[0];
                    if (k.pageX + 24 > this.data.dnd.cof.left + this.data.dnd.cw) {
                        if (this.data.dnd.i1) {
                            clearInterval(this.data.dnd.i1)
                        }
                        this.data.dnd.i1 = setInterval(f.proxy(function() {
                            this.scrollLeft += f.vakata.dnd.scroll_spd
                        }, j), 100)
                    } else {
                        if (k.pageX - 24 < this.data.dnd.cof.left) {
                            if (this.data.dnd.i1) {
                                clearInterval(this.data.dnd.i1)
                            }
                            this.data.dnd.i1 = setInterval(f.proxy(function() {
                                this.scrollLeft -= f.vakata.dnd.scroll_spd
                            }, j), 100)
                        } else {
                            if (this.data.dnd.i1) {
                                clearInterval(this.data.dnd.i1)
                            }
                        }
                    }
                    if (k.pageY + 24 > this.data.dnd.cof.top + this.data.dnd.ch) {
                        if (this.data.dnd.i2) {
                            clearInterval(this.data.dnd.i2)
                        }
                        this.data.dnd.i2 = setInterval(f.proxy(function() {
                            this.scrollTop += f.vakata.dnd.scroll_spd
                        }, j), 100)
                    } else {
                        if (k.pageY - 24 < this.data.dnd.cof.top) {
                            if (this.data.dnd.i2) {
                                clearInterval(this.data.dnd.i2)
                            }
                            this.data.dnd.i2 = setInterval(f.proxy(function() {
                                this.scrollTop -= f.vakata.dnd.scroll_spd
                            }, j), 100)
                        } else {
                            if (this.data.dnd.i2) {
                                clearInterval(this.data.dnd.i2)
                            }
                        }
                    }
                }
            }, this)).delegate("a", "mousedown.jstree", f.proxy(function(j) {
                if (j.which === 1) {
                    this.start_drag(j.currentTarget, j);
                    return false
                }
            }, this)).delegate("a", "mouseenter.jstree", f.proxy(function(j) {
                if (f.vakata.dnd.is_drag && f.vakata.dnd.user_data.jstree) {
                    this.dnd_enter(j.currentTarget)
                }
            }, this)).delegate("a", "mousemove.jstree", f.proxy(function(j) {
                if (f.vakata.dnd.is_drag && f.vakata.dnd.user_data.jstree) {
                    if (typeof this.data.dnd.off.top === "undefined") {
                        this.data.dnd.off = f(j.target).offset()
                    }
                    this.data.dnd.w = (j.pageY - (this.data.dnd.off.top || 0)) % this.data.core.li_height;
                    if (this.data.dnd.w < 0) {
                        this.data.dnd.w += this.data.core.li_height
                    }
                    this.dnd_show()
                }
            }, this)).delegate("a", "mouseleave.jstree", f.proxy(function(j) {
                if (f.vakata.dnd.is_drag && f.vakata.dnd.user_data.jstree) {
                    this.data.dnd.after = false;
                    this.data.dnd.before = false;
                    this.data.dnd.inside = false;
                    f.vakata.dnd.helper.children("ins").attr("class", "jstree-invalid");
                    a.hide();
                    if (c && c[0] === j.target.parentNode) {
                        if (this.data.dnd.to1) {
                            clearTimeout(this.data.dnd.to1);
                            this.data.dnd.to1 = false
                        }
                        if (this.data.dnd.to2) {
                            clearTimeout(this.data.dnd.to2);
                            this.data.dnd.to2 = false
                        }
                    }
                }
            }, this)).delegate("a", "mouseup.jstree", f.proxy(function(j) {
                if (f.vakata.dnd.is_drag && f.vakata.dnd.user_data.jstree) {
                    this.dnd_finish(j)
                }
            }, this));
            f(document).bind("drag_stop.vakata", f.proxy(function() {
                this.data.dnd.after = false;
                this.data.dnd.before = false;
                this.data.dnd.inside = false;
                this.data.dnd.off = false;
                this.data.dnd.prepared = false;
                this.data.dnd.w = false;
                this.data.dnd.to1 = false;
                this.data.dnd.to2 = false;
                this.data.dnd.active = false;
                this.data.dnd.foreign = false;
                if (a) {
                    a.css({
                        top: "-2000px"
                    })
                }
            }, this)).bind("drag_start.vakata", f.proxy(function(l, j) {
                if (j.data.jstree) {
                    var k = f(j.event.target);
                    if (k.closest(".jstree").hasClass("jstree-" + this.get_index())) {
                        this.dnd_enter(k)
                    }
                }
            }, this));
            var i = this._get_settings().dnd;
            if (i.drag_target) {
                f(document).delegate(i.drag_target, "mousedown.jstree", f.proxy(function(k) {
                    h = k.target;
                    f.vakata.dnd.drag_start(k, {
                        jstree: true,
                        obj: k.target
                    }, "<ins class='jstree-icon'></ins>" + f(k.target).text());
                    if (this.data.themes) {
                        a.attr("class", "jstree-" + this.data.themes.theme);
                        f.vakata.dnd.helper.attr("class", "jstree-dnd-helper jstree-" + this.data.themes.theme)
                    }
                    f.vakata.dnd.helper.children("ins").attr("class", "jstree-invalid");
                    var j = this.get_container();
                    this.data.dnd.cof = j.offset();
                    this.data.dnd.cw = parseInt(j.width(), 10);
                    this.data.dnd.ch = parseInt(j.height(), 10);
                    this.data.dnd.foreign = true;
                    return false
                }, this))
            }
            if (i.drop_target) {
                f(document).delegate(i.drop_target, "mouseenter.jstree", f.proxy(function(j) {
                    if (this.data.dnd.active && this._get_settings().dnd.drop_check.call(this, {
                            o: h,
                            r: f(j.target)
                        })) {
                        f.vakata.dnd.helper.children("ins").attr("class", "jstree-ok")
                    }
                }, this)).delegate(i.drop_target, "mouseleave.jstree", f.proxy(function(j) {
                    if (this.data.dnd.active) {
                        f.vakata.dnd.helper.children("ins").attr("class", "jstree-invalid")
                    }
                }, this)).delegate(i.drop_target, "mouseup.jstree", f.proxy(function(j) {
                    if (this.data.dnd.active && f.vakata.dnd.helper.children("ins").hasClass("jstree-ok")) {}
                }, this))
            }
        },
        defaults: {
            copy_modifier: "ctrl",
            check_timeout: 200,
            open_timeout: 500,
            drop_target: ".jstree-drop",
            drop_check: function(i) {
                return true
            },
            drop_finish: f.noop,
            drag_target: ".jstree-draggable",
            drag_finish: f.noop,
            drag_check: function(i) {
                return {
                    after: false,
                    before: false,
                    inside: true
                }
            }
        },
        _fn: {
            dnd_prepare: function() {
                if (!c || !c.length) {
                    return
                }
                this.data.dnd.off = c.offset();
                if (this._get_settings().core.rtl) {
                    this.data.dnd.off.right = this.data.dnd.off.left + c.width()
                }
                if (this.data.dnd.foreign) {
                    var i = this._get_settings().dnd.drag_check.call(this, {
                        o: h,
                        r: c
                    });
                    this.data.dnd.after = i.after;
                    this.data.dnd.before = i.before;
                    this.data.dnd.inside = i.inside;
                    this.data.dnd.prepared = true;
                    return this.dnd_show()
                }
                this.prepare_move(h, c, "before");
                this.data.dnd.before = this.check_move();
                this.prepare_move(h, c, "after");
                this.data.dnd.after = this.check_move();
                if (this._is_loaded(c)) {
                    this.prepare_move(h, c, "inside");
                    this.data.dnd.inside = this.check_move()
                } else {
                    this.data.dnd.inside = false
                }
                this.data.dnd.prepared = true;
                return this.dnd_show()
            },
            dnd_show: function() {
                if (this._get_settings().dnd.dragConfig && this._get_settings().dnd.dragConfig.forbidInnerDrag) {
                    return
                }
                if (!this.data.dnd.prepared) {
                    return
                }
                var k = ["before", "inside", "after"],
                    i = false,
                    j = this._get_settings().core.rtl,
                    l;
                if (this.data.dnd.w < this.data.core.li_height / 3) {
                    k = ["before", "inside", "after"]
                } else {
                    if (this.data.dnd.w <= this.data.core.li_height * 2 / 3) {
                        k = this.data.dnd.w < this.data.core.li_height / 2 ? ["inside", "before", "after"] : ["inside", "after", "before"]
                    } else {
                        k = ["after", "inside", "before"]
                    }
                }
                f.each(k, f.proxy(function(m, n) {
                    if (this.data.dnd[n]) {
                        f.vakata.dnd.helper.children("ins").attr("class", "jstree-ok");
                        i = n;
                        return false
                    }
                }, this));
                if (i === false) {
                    f.vakata.dnd.helper.children("ins").attr("class", "jstree-invalid")
                }
                l = j ? (this.data.dnd.off.right - 18) : (this.data.dnd.off.left + 10);
                switch (i) {
                    case "before":
                        a.css({
                            left: l + "px",
                            top: (this.data.dnd.off.top - 6) + "px"
                        }).show();
                        break;
                    case "after":
                        a.css({
                            left: l + "px",
                            top: (this.data.dnd.off.top + this.data.core.li_height - 7) + "px"
                        }).show();
                        break;
                    case "inside":
                        a.css({
                            left: l + (j ? -4 : 4) + "px",
                            top: (this.data.dnd.off.top + this.data.core.li_height / 2 - 5) + "px"
                        }).show();
                        break;
                    default:
                        a.hide();
                        break
                }
                return i
            },
            dnd_open: function() {
                this.data.dnd.to2 = false;
                this.open_node(c, f.proxy(this.dnd_prepare, this), true)
            },
            dnd_finish: function(i) {
                if (this._get_settings().dnd.dragConfig && this._get_settings().dnd.dragConfig.forbidInnerDrag) {
                    this.data.dnd.foreign = true
                }
                if (this.data.dnd.foreign) {
                    if (this.data.dnd.after || this.data.dnd.before || this.data.dnd.inside) {
                        this._get_settings().dnd.drag_finish.call(this, {
                            o: h,
                            r: c
                        })
                    }
                } else {
                    this.dnd_prepare();
                    this.move_node(h, c, this.dnd_show(), i[this._get_settings().dnd.copy_modifier + "Key"])
                }
                h = false;
                c = false;
                a.hide()
            },
            dnd_enter: function(j) {
                var i = this._get_settings().dnd;
                this.data.dnd.prepared = false;
                c = this._get_node(j);
                if (i.check_timeout) {
                    if (this.data.dnd.to1) {
                        clearTimeout(this.data.dnd.to1)
                    }
                    this.data.dnd.to1 = setTimeout(f.proxy(this.dnd_prepare, this), i.check_timeout)
                } else {
                    this.dnd_prepare()
                }
                if (i.open_timeout) {
                    if (this.data.dnd.to2) {
                        clearTimeout(this.data.dnd.to2)
                    }
                    if (c && c.length && c.hasClass("jstree-closed")) {
                        this.data.dnd.to2 = setTimeout(f.proxy(this.dnd_open, this), i.open_timeout)
                    }
                } else {
                    if (c && c.length && c.hasClass("jstree-closed")) {
                        this.dnd_open()
                    }
                }
            },
            start_drag: function(n, m) {
                h = this._get_node(n);
                var k = this._get_settings().dnd;
                if (k.dragConfig && k.dragConfig.isAllowDragFn) {
                    var j = k.dragConfig.isAllowDragFn.call(this, h);
                    if (!j) {
                        return false
                    }
                }
                if (this.data.ui && this.is_selected(h)) {
                    h = this._get_node(null, true)
                }
                f.vakata.dnd.drag_start(m, {
                    jstree: true,
                    obj: h
                }, "<ins class='jstree-icon'></ins>" + (h.length > 1 ? "Multiple selection" : this.get_text(h)));
                if (this.data.themes) {
                    a.attr("class", "jstree-" + this.data.themes.theme);
                    f.vakata.dnd.helper.attr("class", "jstree-dnd-helper jstree-" + this.data.themes.theme)
                }
                var i = this.get_container();
                this.data.dnd.cof = i.children("ul").offset();
                this.data.dnd.cw = parseInt(i.width(), 10);
                this.data.dnd.ch = parseInt(i.height(), 10);
                this.data.dnd.active = true;
                if (k.dragConfig) {
                    var l = m.liveFired;
                    if (f(l).attr("id") != i.attr("id")) {
                        f.vakata.dnd.helper.attr("class", "jstree-dnd-helper jstree-")
                    }
                }
            }
        }
    });
    f(function() {
        var i = "#vakata-dragged ins { display:block; text-decoration:none; width:16px; height:16px; margin:0 0 0 0; padding:0; position:absolute; top:4px; left:4px; } #vakata-dragged .jstree-ok { background:green; } #vakata-dragged .jstree-invalid { background:red; } #jstree-marker { padding:0; margin:0; line-height:12px; font-size:1px; overflow:hidden; height:12px; width:8px; position:absolute; top:-30px; z-index:10000; background-repeat:no-repeat; display:none; background-color:silver; } ";
        f.vakata.css.add_sheet({
            str: i
        });
        a = f("<div>").attr({
            id: "jstree-marker"
        }).hide().appendTo("body");
        f(document).bind("drag_start.vakata", function(k, j) {
            if (j.data.jstree) {
                a.show()
            }
        });
        f(document).bind("drag_stop.vakata", function(k, j) {
            if (j.data.jstree) {
                a.hide()
            }
        })
    })
})(jQuery);
var cD = 0;
(function(a) {
    a.jstree.plugin("checkbox", {
        __init: function() {
            this.select_node = this.deselect_node = this.deselect_all = a.noop;
            this.get_selected = this.get_checked;
            this.sc = this._get_settings().checkbox;
            this.js_path = a.vakata.context.jsPath("com.newland.tree.NLTree");

            function d(f, g) {
                if (this._get_node(f.target).hasClass("jstree-checked")) {
                    this.uncheck_node(f.target, g)
                } else {
                    this.check_node(f.target, g)
                }
                if (this.data.ui) {
                    this.save_selected()
                }
                if (this.data.cookies) {
                    this.save_cookie("select_node")
                }
                f.preventDefault()
            }
            this.get_container().bind("open_node.jstree create_node.jstree", a.proxy(function(g, f) {
                this._prepare_checkboxes(f.rslt.obj)
            }, this)).bind("loaded.jstree", a.proxy(function(f) {
                this._prepare_checkboxes()
            }, this));

            function c(f) {
                if (this.sc.leftmouse.onCheck) {
                    this.sc.leftmouse.onCheck.call(this, this._get_node(f.target))
                }
                f.preventDefault()
            }

            function b(f) {
                if (this.sc.rightmouse.onCheck) {
                    this.sc.rightmouse.onCheck.call(this, this._get_node(f.target))
                }
                f.preventDefault()
            }
            if (this.sc.leftmouse.isClickCheckboxDoCheck && !this._get_settings().checkbox.readOnly && !this._get_settings().checkbox.disabled) {
                this.get_container().delegate("a > ins.jstree-checkbox", "click.jstree", a.proxy(function(f) {
                    d.call(this, f, this.sc.leftmouse.isCheckLinked);
                    c.call(this, f)
                }, this))
            }
            if (this.sc.leftmouse.isClickNodeDoCheck && !this._get_settings().checkbox.readOnly && !this._get_settings().checkbox.disabled) {
                this.get_container().delegate("a", "click.jstree", a.proxy(function(g) {
                    var f = a(g.target);
                    if (!(f.is("ins") && f.hasClass("jstree-checkbox"))) {
                        d.call(this, g, this.sc.leftmouse.isCheckLinked);
                        c.call(this, g)
                    }
                }, this))
            }
            if (this.sc.leftmouse.isDblClickCheckboxDoCheck && !this._get_settings().checkbox.readOnly && !this._get_settings().checkbox.disabled) {
                this.get_container().delegate("a > ins.jstree-checkbox", "dblclick.jstree", a.proxy(function(f) {
                    d.call(this, f, this.sc.leftmouse.isCheckLinked);
                    c.call(this, f)
                }, this))
            }
            if (this.sc.leftmouse.isDblClickNodeDoCheck && !this._get_settings().checkbox.readOnly && !this._get_settings().checkbox.disabled) {
                this.get_container().delegate("a", "dblclick.jstree", a.proxy(function(g) {
                    var f = a(g.target);
                    if (!(f.is("ins") && f.hasClass("jstree-checkbox"))) {
                        d.call(this, g, this.sc.leftmouse.isCheckLinked);
                        c.call(this, g)
                    }
                }, this))
            }
            if (this.sc.rightmouse.isClickCheckboxDoCheck && !this._get_settings().checkbox.readOnly && !this._get_settings().checkbox.disabled) {
                this.get_container().delegate("a > ins.jstree-checkbox", "contextmenu.jstree", a.proxy(function(f) {
                    d.call(this, f, this.sc.rightmouse.isCheckLinked);
                    b.call(this, f)
                }, this))
            }
            if (this.sc.rightmouse.isClickNodeDoCheck && !this._get_settings().checkbox.readOnly && !this._get_settings().checkbox.disabled) {
                this.get_container().delegate("a", "contextmenu.jstree", a.proxy(function(g) {
                    var f = a(g.target);
                    if (!(f.is("ins") && f.hasClass("jstree-checkbox"))) {
                        d.call(this, g, this.sc.rightmouse.isCheckLinked);
                        b.call(this, g)
                    }
                }, this))
            }
        },
        __destroy: function() {
            this.get_container().find(".jstree-checkbox").remove()
        },
        _fn: {
            prepare_checkboxes: function(b) {
                this._prepare_checkboxes(b)
            },
            _prepare_checkboxes: function(f) {
                f = !f || f == -1 ? this.get_container() : this._get_node(f);
                var h, g = this,
                    d;
                var b = this.get_container().attr("id");
                var e = this._get_settings().checkbox;
                f.each(function() {
                    d = a(this);
                    h = d.is("li") && d.hasClass("jstree-checked") ? "jstree-checked" : "jstree-unchecked";
                    if (e.disabled == true) {
                        h += "-disabled"
                    }
                    d.find("a").filter(function() {
                        return a(this).parent().is("li")
                    }).not(":has(.jstree-checkbox)").prepend("<ins class='jstree-checkbox'>&#160;</ins>").parent().not(".jstree-checked, .jstree-unchecked").addClass(h)
                })
            },
            _set_ins_bgpic: function(c, b) {
                c.attr("style", "background: url('" + this.js_path + "themes/default/" + b + ".gif') center center no-repeat;")
            },
            change_state: function(c, b, d) {
                c = !c || c == -1 ? this.get_container() : this._get_node(c);
                b = (b === false || b === true) ? b : c.hasClass("jstree-checked");
                if (b) {
                    if (d) {
                        c.find("li").andSelf().removeClass("jstree-checked jstree-undetermined").addClass("jstree-unchecked");
                        if (a.jstree.is_ie6) {
                            this._set_ins_bgpic(a("a:first ins.jstree-checkbox", c.find("li").andSelf()), "unchecked")
                        }
                    } else {
                        c.removeClass("jstree-checked jstree-undetermined").addClass("jstree-unchecked");
                        if (a.jstree.is_ie6) {
                            this._set_ins_bgpic(a("a:first ins.jstree-checkbox", c), "unchecked")
                        }
                    }
                } else {
                    if (d) {
                        if (c) {
                            c.find("li").andSelf().removeClass("jstree-unchecked jstree-undetermined").addClass("jstree-checked");
                            if (a.jstree.is_ie6) {
                                this._set_ins_bgpic(a("a:first ins.jstree-checkbox", c.find("li").andSelf()), "checked")
                            }
                            if (this.data.ui) {
                                this.data.ui.last_selected = c
                            }
                            this.data.checkbox.last_selected = c
                        }
                    } else {
                        if (c) {
                            c.removeClass("jstree-unchecked jstree-undetermined").addClass("jstree-checked");
                            if (a.jstree.is_ie6) {
                                this._set_ins_bgpic(a("a:first ins.jstree-checkbox", c), "checked")
                            }
                            if (this.data.ui) {
                                this.data.ui.last_selected = c
                            }
                            this.data.checkbox.last_selected = c
                        }
                    }
                }
                if (d) {
                    if (c) {
                        var e = this;
                        c.parentsUntil(".jstree", "li").each(function() {
                            var f = a(this);
                            if (b) {
                                if (f.children("ul").children(".jstree-checked, .jstree-undetermined").length) {
                                    f.parentsUntil(".jstree", "li").andSelf().removeClass("jstree-checked jstree-unchecked").addClass("jstree-undetermined");
                                    if (a.jstree.is_ie6) {
                                        e._set_ins_bgpic(a("a:first ins.jstree-checkbox", f.parentsUntil(".jstree", "li").andSelf()), "undetermined")
                                    }
                                    return false
                                } else {
                                    f.removeClass("jstree-checked jstree-undetermined").addClass("jstree-unchecked");
                                    if (a.jstree.is_ie6) {
                                        e._set_ins_bgpic(a("a:first ins.jstree-checkbox", f), "unchecked")
                                    }
                                }
                            } else {
                                if (f.children("ul").children(".jstree-unchecked, .jstree-undetermined").length) {
                                    f.parentsUntil(".jstree", "li").andSelf().removeClass("jstree-checked jstree-unchecked").addClass("jstree-undetermined");
                                    if (a.jstree.is_ie6) {
                                        e._set_ins_bgpic(a("a:first ins.jstree-checkbox", f.parentsUntil(".jstree", "li").andSelf()), "undetermined")
                                    }
                                    return false
                                } else {
                                    f.removeClass("jstree-unchecked jstree-undetermined").addClass("jstree-checked");
                                    if (a.jstree.is_ie6) {
                                        e._set_ins_bgpic(a("a:first ins.jstree-checkbox", f), "checked")
                                    }
                                }
                            }
                        })
                    }
                }
                if (this.data.ui) {
                    this.data.ui.selected = this.get_checked()
                }
                this.__callback(c)
            },
            change_state_disabled: function(c, b, d) {
                c = !c || c == -1 ? this.get_container() : this._get_node(c);
                b = (b === false || b === true) ? b : c.hasClass("jstree-checked-disabled");
                if (b) {
                    if (d) {
                        c.find("li").andSelf().removeClass("jstree-checked-disabled jstree-undetermined-disabled").addClass("jstree-unchecked-disabled");
                        if (a.jstree.is_ie6) {
                            this._set_ins_bgpic(a("a:first ins.jstree-checkbox", c.find("li").andSelf()), "unchecked-disabled")
                        }
                    } else {
                        c.removeClass("jstree-checked-disabled jstree-undetermined-disabled").addClass("jstree-unchecked-disabled");
                        if (a.jstree.is_ie6) {
                            this._set_ins_bgpic(a("a:first ins.jstree-checkbox", c), "unchecked-disabled")
                        }
                    }
                } else {
                    if (d) {
                        if (c) {
                            c.find("li").andSelf().removeClass("jstree-unchecked-disabled jstree-undetermined-disabled").addClass("jstree-checked-disabled");
                            if (a.jstree.is_ie6) {
                                this._set_ins_bgpic(a("a:first ins.jstree-checkbox", c.find("li").andSelf()), "checked-disabled")
                            }
                            if (this.data.ui) {
                                this.data.ui.last_selected = c
                            }
                            this.data.checkbox.last_selected = c
                        }
                    } else {
                        if (c) {
                            c.removeClass("jstree-unchecked-disabled jstree-undetermined-disabled").addClass("jstree-checked-disabled");
                            if (a.jstree.is_ie6) {
                                this._set_ins_bgpic(a("a:first ins.jstree-checkbox", c), "checked-disabled")
                            }
                            if (this.data.ui) {
                                this.data.ui.last_selected = c
                            }
                            this.data.checkbox.last_selected = c
                        }
                    }
                }
                if (d) {
                    if (c) {
                        var e = this;
                        c.parentsUntil(".jstree", "li").each(function() {
                            var f = a(this);
                            if (b) {
                                if (f.children("ul").children(".jstree-checked-disabled, .jstree-undetermined-disabled").length) {
                                    f.parentsUntil(".jstree", "li").andSelf().removeClass("jstree-checked-disabled jstree-unchecked-disabled").addClass("jstree-undetermined-disabled");
                                    if (a.jstree.is_ie6) {
                                        e._set_ins_bgpic(a("a:first ins.jstree-checkbox", f.parentsUntil(".jstree", "li").andSelf()), "undetermined-disabled")
                                    }
                                    return false
                                } else {
                                    f.removeClass("jstree-checked-disabled jstree-undetermined-disabled").addClass("jstree-unchecked-disabled");
                                    if (a.jstree.is_ie6) {
                                        e._set_ins_bgpic(a("a:first ins.jstree-checkbox", f), "unchecked-disabled")
                                    }
                                }
                            } else {
                                if (f.children("ul").children(".jstree-unchecked-disabled, .jstree-undetermined-disabled").length) {
                                    f.parentsUntil(".jstree", "li").andSelf().removeClass("jstree-checked-disabled jstree-unchecked-disabled").addClass("jstree-undetermined-disabled");
                                    if (a.jstree.is_ie6) {
                                        e._set_ins_bgpic(a("a:first ins.jstree-checkbox", f.parentsUntil(".jstree", "li").andSelf()), "undetermined-disabled")
                                    }
                                    return false
                                } else {
                                    f.removeClass("jstree-unchecked-disabled jstree-undetermined-disabled").addClass("jstree-checked-disabled");
                                    if (a.jstree.is_ie6) {
                                        e._set_ins_bgpic(a("a:first ins.jstree-checkbox", f), "checked-disabled")
                                    }
                                }
                            }
                        })
                    }
                }
                if (this.data.ui) {
                    this.data.ui.selected = this.get_checked()
                }
                this.__callback(c)
            },
            check_node: function(b, c) {
                var d = false;
                if (c) {
                    d = true
                }
                if (this._get_settings().checkbox.disabled == true) {
                    this.change_state_disabled(b, false, d)
                } else {
                    this.change_state(b, false, d)
                }
            },
            uncheck_node: function(b, c) {
                var d = false;
                if (c) {
                    d = true
                }
                if (this._get_settings().checkbox.disabled == true) {
                    this.change_state_disabled(b, true, d)
                } else {
                    this.change_state(b, true, d)
                }
            },
            check_all: function() {
                var b = this;
                this.get_container().children("ul").children("li").each(function() {
                    b.check_node(this, true)
                })
            },
            uncheck_all: function() {
                var b = this;
                this.get_container().children("ul").children("li").each(function() {
                    b.change_state(this, true, true)
                })
            },
            is_checked: function(b) {
                b = this._get_node(b);
                return b.length ? b.is(".jstree-checked") : false
            },
            get_checked: function(b) {
                b = !b || b === -1 ? this.get_container() : this._get_node(b);
                return b.find("li.jstree-checked")
            },
            get_unchecked: function(b) {
                b = !b || b === -1 ? this.get_container() : this._get_node(b);
                return b.find("> ul > .jstree-unchecked, .jstree-undetermined > ul > .jstree-unchecked")
            },
            show_checkboxes: function() {
                this.get_container().children("ul").removeClass("jstree-no-checkboxes")
            },
            hide_checkboxes: function() {
                this.get_container().children("ul").addClass("jstree-no-checkboxes")
            },
            _repair_state: function(f) {
                f = this._get_node(f);
                if (!f.length) {
                    return
                }
                var e = f.find("> ul > .jstree-checked").length,
                    d = f.find("> ul > .jstree-undetermined").length,
                    g = f.find("> ul > li").length;
                if (g === 0) {
                    if (f.hasClass("jstree-undetermined")) {
                        this.check_node(f)
                    }
                } else {
                    if (e === 0 && d === 0) {
                        this.uncheck_node(f)
                    } else {
                        if (e === g) {
                            this.check_node(f)
                        } else {
                            f.parentsUntil(".jstree", "li").removeClass("jstree-checked jstree-unchecked").addClass("jstree-undetermined")
                        }
                    }
                }
            },
            reselect: function() {
                if (this.data.ui) {
                    var c = this,
                        b = this.data.ui.to_select;
                    b = a.map(a.makeArray(b), function(d) {
                        return "#" + d.toString().replace(/^#/, "").replace("\\/", "/").replace("/", "\\/")
                    });
                    this.deselect_all();
                    a.each(b, function(d, e) {
                        c.check_node(e)
                    });
                    this.__callback()
                }
            }
        }
    })
})(jQuery);
(function(a) {
    a.expr[":"].jstree_contains = function(c, d, b) {
        return (c.textContent || c.innerText || "").toLowerCase().indexOf(b[3].toLowerCase()) >= 0
    };
    a.jstree.plugin("search", {
        __init: function() {
            this.data.search.str = "";
            this.data.search.result = a()
        },
        defaults: {
            ajax: false,
            case_insensitive: false
        },
        _fn: {
            search: function(g, b) {
                if (g === "") {
                    return
                }
                var e = this.get_settings().search,
                    d = this,
                    c = function() {},
                    f = function() {};
                this.data.search.str = g;
                if (!b && e.ajax !== false && this.get_container().find(".jstree-closed:eq(0)").length > 0) {
                    this.search.supress_callback = true;
                    c = function() {};
                    f = function(k, i, h) {
                        var j = this.get_settings().search.ajax.success;
                        if (j) {
                            k = j.call(this, k, i, h) || k
                        }
                        this.data.search.to_open = k;
                        this._search_open()
                    };
                    e.ajax.context = this;
                    e.ajax.error = c;
                    e.ajax.success = f;
                    if (a.isFunction(e.ajax.url)) {
                        e.ajax.url = e.ajax.url.call(this, g)
                    }
                    if (a.isFunction(e.ajax.data)) {
                        e.ajax.data = e.ajax.data.call(this, g)
                    }
                    if (!e.ajax.data) {
                        e.ajax.data = {
                            search_string: g
                        }
                    }
                    if (!e.ajax.dataType || /^json/.exec(e.ajax.dataType)) {
                        e.ajax.dataType = "json"
                    }
                    a.ajax(e.ajax);
                    return
                }
                if (this.data.search.result.length) {
                    this.clear_search()
                }
                this.data.search.result = this.get_container().find("a" + (this.data.languages ? "." + this.get_lang() : "") + ":" + (e.case_insensitive ? "jstree_contains" : "contains") + "(" + this.data.search.str + ")");
                this.data.search.result.addClass("jstree-search").parents(".jstree-closed").each(function() {
                    d.open_node(this, false, true)
                });
                this.__callback({
                    nodes: this.data.search.result,
                    str: g
                })
            },
            clear_search: function(b) {
                this.data.search.result.removeClass("jstree-search");
                this.__callback(this.data.search.result);
                this.data.search.result = a()
            },
            _search_open: function(c) {
                var f = this,
                    b = true,
                    e = [],
                    d = [];
                if (this.data.search.to_open.length) {
                    a.each(this.data.search.to_open, function(g, h) {
                        if (h == "#") {
                            return true
                        }
                        if (a(h).length && a(h).is(".jstree-closed")) {
                            e.push(h)
                        } else {
                            d.push(h)
                        }
                    });
                    if (e.length) {
                        this.data.search.to_open = d;
                        a.each(e, function(g, h) {
                            f.open_node(h, function() {
                                f._search_open(true)
                            })
                        });
                        b = false
                    }
                }
                if (b) {
                    this.search(this.data.search.str, true)
                }
            }
        }
    })
})(jQuery);
(function(a) {
    a.vakata.context = {
        cnt: a("<div id='vakata-contextmenu'>"),
        vis: false,
        tgt: false,
        par: false,
        func: false,
        data: false,
        jsPath: function(e) {
            var c = document.getElementsByTagName("script");
            for (var b = 0; b < c.length; b++) {
                if (c[b].src.lastIndexOf(e) >= 0) {
                    var d = c[b].src.replace(/\\/gi, "/");
                    return d.substring(0, d.lastIndexOf("/") + 1)
                }
            }
            return ""
        },
        show: function(l, k, i, g, f, b) {
            a.vakata.context.par = b || k || null;
            a.vakata.context.data = f || null;
            var e = a.vakata.context.parse(l),
                c, j;
            if (!e) {
                return
            }
            a.vakata.context.vis = true;
            a.vakata.context.tgt = k;
            a.vakata.context.cnt.html(e).css({
                visibility: "hidden",
                display: "block",
                left: 0,
                top: 0
            });
            c = a.vakata.context.cnt.height();
            j = a.vakata.context.cnt.width();
            if (i + j > a(document).width()) {
                i = a(document).width() - (j + 5);
                a.vakata.context.cnt.find("li > ul").addClass("right")
            }
            if (g + c > a(document).height()) {
                g = g - (c + k[0].offsetHeight);
                a.vakata.context.cnt.find("li > ul").addClass("bottom")
            }
            if (a.jstree.is_ie6) {
                a.vakata.context.cnt.find("li > ins.jstree-contextmenu-create-icon").each(function() {
                    if (a(this).parent().css("background")) {
                        a(this).parent().attr("style", (a(this).parent().css("display") == "none" ? "display: none;" : "") + "background: url(" + a.vakata.context.jsPath("com.newland.tree.NLTree") + "themes/default/create.gif) 0px 0px no-repeat;")
                    }
                });
                a.vakata.context.cnt.find("li > ins.jstree-contextmenu-rename-icon").each(function() {
                    if (a(this).parent().css("background")) {
                        a(this).parent().attr("style", (a(this).parent().css("display") == "none" ? "display: none;" : "") + "background: url(" + a.vakata.context.jsPath("com.newland.tree.NLTree") + "themes/default/rename.gif) 0px 0px no-repeat;")
                    }
                });
                a.vakata.context.cnt.find("li > ins.jstree-contextmenu-remove-icon").each(function() {
                    if (a(this).parent().css("background")) {
                        a(this).parent().attr("style", (a(this).parent().css("display") == "none" ? "display: none;" : "") + "background: url(" + a.vakata.context.jsPath("com.newland.tree.NLTree") + "themes/default/remove.gif) 0px 0px no-repeat;")
                    }
                })
            }
            a.vakata.context.cnt.css({
                left: i,
                top: g
            }).find("li:has(ul)").bind("mouseenter", function(o) {
                var d = a(document).width(),
                    n = a(document).height(),
                    m = a(this).children("ul").show();
                if (d !== a(document).width()) {
                    m.toggleClass("right")
                }
                if (n !== a(document).height()) {
                    m.toggleClass("bottom")
                }
            }).bind("mouseleave", function(d) {
                a(this).children("ul").hide()
            }).end().css({
                visibility: "visible"
            }).show();
            a(document).triggerHandler("context_show.vakata")
        },
        hide: function() {
            a.vakata.context.vis = false;
            a.vakata.context.cnt.attr("class", "").hide();
            a(document).triggerHandler("context_hide.vakata")
        },
        parse: function(j, h) {
            if (h) {
                var i, d, f, e = "";
                if (a.vakata.context.par) {
                    i = a.vakata.context.par.attr("rel")
                }
                if (a.vakata.context.data && a.vakata.context.data.get_settings() && a.vakata.context.data.get_settings().types) {
                    d = a.vakata.context.data.get_settings().types.types
                }
                if (i && d) {
                    if (d[i]) {
                        f = d[i].valid_children
                    }
                }
                if (f && f != "none") {
                    e = f.join(";")
                }
            }
            if (!j) {
                return false
            }
            var g = "",
                b = false,
                c = true;
            if (!h) {
                a.vakata.context.func = {}
            }
            g += "<ul>";
            a.each(j, function(k, l) {
                if (!l) {
                    return true
                }
                if (h && e.indexOf(k) == -1) {
                    l._disabled = true
                }
                a.vakata.context.func[k] = l.action;
                if (!c && l.separator_before) {
                    g += "<li class='vakata-separator vakata-separator-before'></li>"
                }
                c = false;
                if (a.jstree.is_ie6) {
                    g += "<li style='" + (!l._display ? " display: none; " : "") + " background:url(" + l.icon + ") 0 0 no-repeat;'  class='" + (l._class) + (l._disabled ? " jstree-contextmenu-disabled " : "") + "'><ins "
                } else {
                    g += "<li" + (!l._display ? " style='display: none;' " : "") + " class='" + (l._class || "") + (l._disabled ? " jstree-contextmenu-disabled " : "") + "'><ins "
                }
                if (l.icon && l.icon.indexOf("/") === -1) {
                    g += " class='" + l.icon + "' "
                }
                if (l.icon && l.icon.indexOf("/") !== -1) {
                    g += " style='background:url(" + l.icon + ") center center no-repeat;' "
                }
                g += ">&#160;</ins><a href='#' rel='" + k + "'>";
                if (l.submenu) {
                    g += "<span style='float:right;'>&raquo;</span>"
                }
                if (a.jstree.is_ie6) {
                    g += "<span>&nbsp;&nbsp;&nbsp;&nbsp;</span>"
                }
                g += l.label + "</a>";
                if (l.submenu) {
                    b = a.vakata.context.parse(l.submenu, true);
                    if (b) {
                        g += b
                    }
                }
                g += "</li>";
                if (l.separator_after) {
                    g += "<li" + (!l._display ? " style='display: none;' " : "") + " class='vakata-separator vakata-separator-after'></li>";
                    c = true
                }
            });
            g = g.replace(/<li class\='vakata-separator vakata-separator-after'\><\/li\>$/, "");
            g += "</ul>";
            return g.length > 10 ? g : false
        },
        exec: function(b) {
            if (a.isFunction(a.vakata.context.func[b])) {
                a.vakata.context.func[b].call(a.vakata.context.data, a.vakata.context.par);
                return true
            } else {
                return false
            }
        }
    };
    a(function() {
        var b = "#vakata-contextmenu { display:none; position:absolute; margin:0; padding:0; min-width:140px; background:#ebebeb; border:1px solid silver; z-index:10000; *width:140px; } #vakata-contextmenu ul { min-width:140px; *width:140px; } #vakata-contextmenu ul, #vakata-contextmenu li { margin:0; padding:0; list-style-type:none; display:block; } #vakata-contextmenu li { line-height:20px; min-height:20px; position:relative; padding:0px; } #vakata-contextmenu li a { padding:1px 6px; line-height:17px; display:block; text-decoration:none; margin:1px 1px 0 1px; } #vakata-contextmenu li ins { float:left; width:16px; height:16px; text-decoration:none; margin-right:2px; } #vakata-contextmenu li a:hover, #vakata-contextmenu li.vakata-hover > a { background:gray; color:white; } #vakata-contextmenu li ul { display:none; position:absolute; top:-2px; left:100%; background:#ebebeb; border:1px solid gray; } #vakata-contextmenu .right { right:100%; left:auto; } #vakata-contextmenu .bottom { bottom:-1px; top:auto; } #vakata-contextmenu li.vakata-separator { min-height:0; height:1px; line-height:1px; font-size:1px; overflow:hidden; margin:0 2px; background:silver; /* border-top:1px solid #fefefe; */ padding:0; } ";
        a.vakata.css.add_sheet({
            str: b
        });
        a.vakata.context.cnt.delegate("a", "click", function(c) {
            c.preventDefault()
        }).delegate("a", "mouseup", function(c) {
            if (!a(this).parent().hasClass("jstree-contextmenu-disabled") && a.vakata.context.exec(a(this).attr("rel"))) {
                a.vakata.context.hide()
            } else {
                a(this).blur()
            }
        }).delegate("a", "mouseover", function() {
            a.vakata.context.cnt.find(".vakata-hover").removeClass("vakata-hover")
        }).appendTo("body");
        a(document).bind("mousedown", function(c) {
            if (a.vakata.context.vis && !a.contains(a.vakata.context.cnt[0], c.target)) {
                a.vakata.context.hide()
            }
        });
        if (typeof a.hotkeys !== "undefined") {
            a(document).bind("keydown", "up", function(c) {
                if (a.vakata.context.vis) {
                    var d = a.vakata.context.cnt.find("ul:visible").last().children(".vakata-hover").removeClass("vakata-hover").prevAll("li:not(.vakata-separator)").first();
                    if (!d.length) {
                        d = a.vakata.context.cnt.find("ul:visible").last().children("li:not(.vakata-separator)").last()
                    }
                    d.addClass("vakata-hover");
                    c.stopImmediatePropagation();
                    c.preventDefault()
                }
            }).bind("keydown", "down", function(c) {
                if (a.vakata.context.vis) {
                    var d = a.vakata.context.cnt.find("ul:visible").last().children(".vakata-hover").removeClass("vakata-hover").nextAll("li:not(.vakata-separator)").first();
                    if (!d.length) {
                        d = a.vakata.context.cnt.find("ul:visible").last().children("li:not(.vakata-separator)").first()
                    }
                    d.addClass("vakata-hover");
                    c.stopImmediatePropagation();
                    c.preventDefault()
                }
            }).bind("keydown", "right", function(c) {
                if (a.vakata.context.vis) {
                    a.vakata.context.cnt.find(".vakata-hover").children("ul").show().children("li:not(.vakata-separator)").removeClass("vakata-hover").first().addClass("vakata-hover");
                    c.stopImmediatePropagation();
                    c.preventDefault()
                }
            }).bind("keydown", "left", function(c) {
                if (a.vakata.context.vis) {
                    a.vakata.context.cnt.find(".vakata-hover").children("ul").hide().children(".vakata-separator").removeClass("vakata-hover");
                    c.stopImmediatePropagation();
                    c.preventDefault()
                }
            }).bind("keydown", "esc", function(c) {
                a.vakata.context.hide();
                c.preventDefault()
            }).bind("keydown", "space", function(c) {
                a.vakata.context.cnt.find(".vakata-hover").last().children("a").click();
                c.preventDefault()
            })
        }
    });
    a.jstree.plugin("contextmenu", {
        __init: function() {
            this.get_container().delegate("a", "contextmenu.jstree", a.proxy(function(b) {
                b.preventDefault();
                this.show_contextmenu(b.currentTarget, b.pageX, b.pageY)
            }, this)).bind("destroy.jstree", a.proxy(function() {
                if (this.data.contextmenu) {
                    a.vakata.context.hide()
                }
            }, this));
            a(document).bind("context_hide.vakata", a.proxy(function() {
                this.data.contextmenu = false
            }, this))
        },
        defaults: {
            select_node: false,
            show_at_node: true,
            items: {
                create: {
                    separator_before: false,
                    separator_after: true,
                    label: "Create",
                    action: function(b) {
                        this.create(b)
                    }
                },
                rename: {
                    separator_before: false,
                    separator_after: false,
                    label: "Rename",
                    action: function(b) {
                        this.rename(b)
                    }
                },
                remove: {
                    separator_before: false,
                    icon: false,
                    separator_after: false,
                    label: "Delete",
                    action: function(b) {
                        this.remove(b)
                    }
                },
                ccp: {
                    separator_before: true,
                    icon: false,
                    separator_after: false,
                    label: "Edit",
                    action: false,
                    submenu: {
                        cut: {
                            separator_before: false,
                            separator_after: false,
                            label: "Cut",
                            action: function(b) {
                                this.cut(b)
                            }
                        },
                        copy: {
                            separator_before: false,
                            icon: false,
                            separator_after: false,
                            label: "Copy",
                            action: function(b) {
                                this.copy(b)
                            }
                        },
                        paste: {
                            separator_before: false,
                            icon: false,
                            separator_after: false,
                            label: "Paste",
                            action: function(b) {
                                this.paste(b)
                            }
                        }
                    }
                }
            }
        },
        _fn: {
            show_contextmenu: function(e, b, g) {
                e = this._get_node(e);
                var d = this.get_settings().contextmenu,
                    c = e.children("a:visible:eq(0)"),
                    f = false;
                if (d.select_node && this.data.ui && !this.is_selected(e)) {
                    this.deselect_all();
                    this.select_node(e, true)
                }
                if (d.show_at_node || typeof b === "undefined" || typeof g === "undefined") {
                    f = c.offset();
                    b = f.left;
                    g = f.top + this.data.core.li_height
                }
                if (a.isFunction(d.items)) {
                    d.items = d.items.call(this, e);
                    d.items = this.doCircle(d.items)
                }
                this.data.contextmenu = true;
                a.vakata.context.show(d.items, c, b, g, this, e);
                if (this.data.themes) {
                    a.vakata.context.cnt.attr("class", "jstree-" + this.data.themes.theme + "-context")
                }
            }
        }
    })
})(jQuery);
(function(a) {
    a.jstree.plugin("types", {
        __init: function() {
            var b = this._get_settings().types;
            this.data.types.attach_to = [];
            this.get_container().bind("init.jstree", a.proxy(function() {
                var e = b.types,
                    d = b.type_attr,
                    c = "",
                    f = this;
                a.each(e, function(g, h) {
                    a.each(h, function(j, i) {
                        if (!/^(max_depth|max_children|icon|valid_children)$/.test(j)) {
                            f.data.types.attach_to.push(j)
                        }
                    });
                    if (!h.icon) {
                        return true
                    }
                    if (h.icon.image || h.icon.position) {
                        c += ".jstree-" + f.get_index() + " li[" + d + "=" + g + "] > a > .jstree-icon { ";
                        if (h.icon.image) {
                            c += " background-image:url(" + h.icon.image + "); "
                        }
                        if (h.icon.position) {
                            c += " background-position:" + h.icon.position + "; "
                        } else {
                            c += " background-position:0 0; "
                        }
                        c += "} "
                    }
                });
                if (c != "") {
                    a.vakata.css.add_sheet({
                        str: c
                    })
                }
            }, this)).bind("before.jstree", a.proxy(function(g, f) {
                if (a.inArray(f.func, this.data.types.attach_to) !== -1) {
                    var d = this._get_settings().types.types,
                        c = this._get_type(f.args[0]);
                    if (((d[c] && typeof d[c][f.func] !== "undefined") || (d.leaf && typeof d.leaf[f.func] !== "undefined")) && !this._check(f.func, f.args[0])) {
                        g.stopImmediatePropagation();
                        return false
                    }
                }
            }, this))
        },
        defaults: {
            max_children: -1,
            max_depth: -1,
            valid_children: "all",
            type_attr: "rel",
            types: {
                leaf: {
                    max_children: -1,
                    max_depth: -1,
                    valid_children: "all"
                }
            }
        },
        _fn: {
            _get_type: function(b) {
                b = this._get_node(b);
                return (!b || !b.length) ? false : b.attr(this._get_settings().types.type_attr) || "leaf"
            },
            set_type: function(c, b) {
                b = this._get_node(b);
                return (!b.length || !c) ? false : b.attr(this._get_settings().types.type_attr, c)
            },
            _check: function(h, g, f) {
                var b = false,
                    c = this._get_type(g),
                    i = 0,
                    j = this,
                    e = this._get_settings().types;
                if (g === -1) {
                    if (!!e[h]) {
                        b = e[h]
                    } else {
                        return
                    }
                } else {
                    if (c === false) {
                        return
                    }
                    if (!!e.types[c] && !!e.types[c][h]) {
                        b = e.types[c][h]
                    } else {
                        if (!!e.types.leaf && !!e.types.leaf[h]) {
                            b = e.types.leaf[h]
                        }
                    }
                }
                if (a.isFunction(b)) {
                    b = b.call(this, g)
                }
                if (h === "max_depth" && g !== -1 && f !== false && e.max_depth !== -2 && b !== 0) {
                    this._get_node(g).children("a:eq(0)").parentsUntil(".jstree", "li").each(function(d) {
                        if (e.max_depth !== -1 && e.max_depth - (d + 1) <= 0) {
                            b = 0;
                            return false
                        }
                        i = (d === 0) ? b : j._check(h, this, false);
                        if (i !== -1 && i - (d + 1) <= 0) {
                            b = 0;
                            return false
                        }
                        if (i >= 0 && (i - (d + 1) < b || b < 0)) {
                            b = i - (d + 1)
                        }
                        if (e.max_depth >= 0 && (e.max_depth - (d + 1) < b || b < 0)) {
                            b = e.max_depth - (d + 1)
                        }
                    })
                }
                return b
            },
            check_move: function() {
                if (!this.__call_old()) {
                    return false
                }
                var b = this._get_move(),
                    g = b.rt._get_settings().types,
                    i = b.rt._check("max_children", b.cr),
                    h = b.rt._check("max_depth", b.cr),
                    e = b.rt._check("valid_children", b.cr),
                    f = 0,
                    j = 1,
                    c;
                if (e === "none") {
                    return false
                }
                if (a.isArray(e) && b.ot && b.ot._get_type) {
                    b.o.each(function() {
                        if (a.inArray(b.ot._get_type(this), e) === -1) {
                            j = false;
                            return false
                        }
                    });
                    if (j === false) {
                        return false
                    }
                }
                if (g.max_children !== -2 && i !== -1) {
                    f = b.cr === -1 ? this.get_container().children("> ul > li").not(b.o).length : b.cr.children("> ul > li").not(b.o).length;
                    if (f + b.o.length > i) {
                        return false
                    }
                }
                if (g.max_depth !== -2 && h !== -1) {
                    j = 0;
                    if (h === 0) {
                        return false
                    }
                    if (typeof b.o.d === "undefined") {
                        c = b.o;
                        while (c.length > 0) {
                            c = c.find("> ul > li");
                            j++
                        }
                        b.o.d = j
                    }
                    if (h - b.o.d < 0) {
                        return false
                    }
                }
                return true
            },
            create_node: function(e, f, c, l, h, k) {
                if (!k && (h || this._is_loaded(e))) {
                    var d = (f && f.match(/^before|after$/i) && e !== -1) ? this._get_parent(e) : this._get_node(e),
                        m = this._get_settings().types,
                        j = this._check("max_children", d),
                        i = this._check("max_depth", d),
                        g = this._check("valid_children", d),
                        b;
                    if (!c) {
                        c = {}
                    }
                    if (g === "none") {
                        return false
                    }
                    if (a.isArray(g)) {
                        if (!c[m.type_attr]) {
                            if (!c) {
                                c = {}
                            }
                            c[m.type_attr] = g[0]
                        } else {
                            if (a.inArray(c[m.type_attr], g) === -1) {
                                return false
                            }
                        }
                    }
                    if (m.max_children !== -2 && j !== -1) {
                        b = d === -1 ? this.get_container().children("> ul > li").length : d.children("> ul > li").length;
                        if (b + 1 > j) {
                            return false
                        }
                    }
                    if (m.max_depth !== -2 && i !== -1 && (i - 1) < 0) {
                        return false
                    }
                }
                return this.__call_old(true, e, f, c, l, h, k)
            }
        }
    })
})(jQuery);
(function(a) {
    a.jstree.plugin("unique", {
        __init: function() {
            this.get_container().bind("before.jstree", a.proxy(function(k, h) {
                var b = [],
                    f = true,
                    j, d;
                var g = this._get_settings().core.attrMap;
                if (h.func == "move_node") {
                    if (h.args[4] === true) {
                        if (h.args[0].o && h.args[0].o.length) {
                            j = this._get_node(h.args[0].np);
                            h.args[0].o.children("a").each(function() {
                                b.push(a(this).contents().filter(function() {
                                    return this.nodeType == 3
                                }).text().replace(/^\s+/g, ""))
                            });
                            f = this._check_unique(b, h.args[0].np.find("> ul > li").not(h.args[0].o))
                        }
                    }
                }
                if (h.func == "create_node") {
                    if (h.args[4] || this._is_loaded(h.args[0])) {
                        j = this._get_node(h.args[0]);
                        if (h.args[1] && (h.args[1] === "before" || h.args[1] === "after")) {
                            j = this._get_parent(h.args[0]);
                            if (!j || j === -1) {
                                j = this.get_container()
                            }
                        }
                        if (typeof h.args[2] === "string") {
                            b.push(h.args[2])
                        } else {
                            if (a.isArray(h.args[2])) {
                                for (var c = 0; c < h.args[2].length; c++) {
                                    if (g && g.text && h.args[2][c][g.text] || h.args[2][c]["text"] && h.args[2]["text"] != "") {
                                        b.push((g && g.text && h.args[2][c][g.text]) || h.args[2][c]["text"])
                                    }
                                }
                            } else {
                                if (!h.args[2] || !((g && g.text && h.args[2][g.text]) || (h.args[2]["text"] && h.args[2]["text"] != ""))) {
                                    b.push(this._get_settings().core.newNodeName)
                                } else {
                                    b.push((g && g.text && h.args[2][g.text]) || h.args[2]["text"])
                                }
                            }
                        }
                        if (j != -1 && j.length) {
                            f = this._check_unique(b, j.find("> ul > li"))
                        }
                    }
                }
                if (h.func == "rename_node") {
                    b.push(h.args[1]);
                    d = this._get_node(h.args[0]);
                    j = this._get_parent(d);
                    if (!j || j === -1) {
                        j = this.get_container()
                    }
                    f = this._check_unique(b, j.find("> ul > li").not(d))
                }
                if (!f) {
                    k.stopPropagation();
                    this._rise_info(b, j);
                    return false
                }
            }, this))
        },
        _fn: {
            _rise_info: function(c, d) {
                var b = this._get_settings().unique.callbackFn;
                if (b) {
                    b.call(this, {
                        parent: d,
                        nodeName: c.join("")
                    })
                } else {
                    alert('\u8282\u70b9 "' + c.join(" | ") + '" \u5df2\u7ecf\u5b58\u5728')
                }
            },
            _check_unique: function(c, d) {
                var b = [];
                d.children("a").each(function() {
                    b.push(a(this).contents().filter(function() {
                        return this.nodeType == 3
                    }).text().replace(/^\s+/g, ""))
                });
                if (!b.length || !c.length) {
                    return true
                }
                b = b.sort().join(",,").replace(/(,|^)([^,]+)(,,\2)+(,|$)/g, "$1$2$4").replace(/,,+/g, ",").replace(/,$/, "").split(",");
                if ((b.length + c.length) != b.concat(c).sort().join(",,").replace(/(,|^)([^,]+)(,,\2)+(,|$)/g, "$1$2$4").replace(/,,+/g, ",").replace(/,$/, "").split(",").length) {
                    return false
                }
                return true
            },
            check_move: function() {
                if (!this.__call_old()) {
                    return false
                }
                var d = this._get_move(),
                    b = [];
                if (d.o && d.o.length) {
                    d.o.children("a").each(function() {
                        b.push(a(this).contents().filter(function() {
                            return this.nodeType == 3
                        }).text().replace(/^\s+/g, ""))
                    });
                    var c = this._check_unique(b, d.np.find("> ul > li").not(d.o));
                    return c
                }
                return true
            }
        }
    })
})(jQuery);
jQuery.cookie = function(b, j, m) {
    if (typeof j != "undefined") {
        m = m || {};
        if (j === null) {
            j = "";
            m.expires = -1
        }
        var e = "";
        if (m.expires && (typeof m.expires == "number" || m.expires.toUTCString)) {
            var f;
            if (typeof m.expires == "number") {
                f = new Date();
                f.setTime(f.getTime() + (m.expires * 24 * 60 * 60 * 1000))
            } else {
                f = m.expires
            }
            e = "; expires=" + f.toUTCString()
        }
        var l = m.path ? "; path=" + (m.path) : "";
        var g = m.domain ? "; domain=" + (m.domain) : "";
        var a = m.secure ? "; secure" : "";
        document.cookie = [b, "=", encodeURIComponent(j), e, l, g, a].join("")
    } else {
        var d = null;
        if (document.cookie && document.cookie != "") {
            var k = document.cookie.split(";");
            for (var h = 0; h < k.length; h++) {
                var c = jQuery.trim(k[h]);
                if (c.substring(0, b.length + 1) == (b + "=")) {
                    d = decodeURIComponent(c.substring(b.length + 1));
                    break
                }
            }
        }
        return d
    }
};
var NLTree = function(e) {
    if (jQuery.browser.msie) {
        document.execCommand("BackgroundImageCache", false, true)
    }
    String.prototype.replaceAll = function(i, c) {
        return this.replace(new RegExp(i, "gm"), c)
    };
    e = jQuery.extend({
        container_id: false,
        url: false,
        data: false,
        method: "post",
        attrMap: false,
        unique: false,
        extParam: false,
        successResultID: "1",
        showErrorMsg: true,
        errormsg: "Request Data Error!",
        initOpenNodeIds: false,
        initSelectNodeIds: false,
        beforeOpenNodeFn: false,
        beforeDeleteNodeFn: false,
        cache: false,
        nodesConfig: false,
        renderNode: false,
        contextMenu: false,
        isSelectLimit: 1,
        isShowDots: true,
        isShowIcons: true,
        checkbox: false,
        isClickNodeDoOpenClose: true,
        isDblClickNodeDoOpenClose: false,
        isContextClickNodeDoOpenClose: false,
        newNodeName: "New Node",
        loadingText: "Loading...",
        isSupportDragNode: false
    }, e);
    e.ajaxDataFn = false;
    e.isSelectLimit = 1;
    var f, m = jQuery("#" + e.container_id);
    if (e.container_id) {
        var k = [],
            h = {};
        k.push("core");
        k.push("themes");
        k.push("json_data");
        if (e.checkbox) {
            k.push("checkbox")
        }
        k.push("ui");
        k.push("crrm");
        if (e.isSupportDragNode) {
            k.push("dnd")
        }
        k.push("search");
        k.push("types");
        if (e.contextMenu) {
            k.push("contextmenu")
        }
        if (e.unique) {
            k.push("unique")
        }
        h.plugins = k;
        h.json_data = {
            props: ["id", "text", "rel"],
            successResultID: e.successResultID,
            showErrorMsg: e.showErrorMsg,
            errormsg: e.errormsg
        };
        if (e.renderNode) {
            h.json_data.renderNode = e.renderNode
        }
        if (e.data) {
            h.json_data.data = e.data
        } else {
            if (e.url) {
                h.json_data.ajax = {};
                h.json_data.ajax.url = e.url;
                h.json_data.ajax.cache = e.cache;
                h.json_data.ajax.method = e.method;
                h.json_data.ajax.data = function(r) {
                    var i = [{
                        name: "operation",
                        value: "get_children"
                    }, {
                        name: "id",
                        value: (r.attr ? r.attr("id").replace(e.container_id + "_", "") : "null")
                    }];
                    if (e.extParam && e.extParam.length) {
                        for (var c = 0; c < e.extParam.length; c++) {
                            i[i.length] = e.extParam[c]
                        }
                    }
                    return i
                }
            }
        }
        h.search = {
            ajax: {
                url: e.url,
                data: function(c) {
                    return {
                        operation: "search",
                        search_str: c
                    }
                }
            }
        };
        h.dnd = {};
        if (e.dragConfig) {
            h.dnd.dragConfig = {
                isAllowDragFn: function() {
                    return true
                },
                dragStopFn: false
            };
            if (e.dragConfig.isAllowDragFn) {
                h.dnd.dragConfig.isAllowDragFn = e.dragConfig.isAllowDragFn
            }
            if (e.dragConfig.dragStopFn) {
                h.dnd.dragConfig.dragStopFn = e.dragConfig.dragStopFn
            }
            if (e.dragConfig.forbidInnerDrag) {
                h.dnd.dragConfig.forbidInnerDrag = e.dragConfig.forbidInnerDrag
            }
            if (e.dragConfig.dropAllow) {
                h.dnd.dragConfig.dropAllow = e.dragConfig.dropAllow
            }
        }
        h.checkbox = {};
        if (e.checkbox) {
            h.checkbox.readOnly = false;
            h.checkbox.disabled = false;
            h.checkbox.leftmouse = {
                isCheckLinked: true,
                isClickCheckboxDoCheck: true,
                isClickNodeDoCheck: false,
                isDblClickCheckboxDoCheck: false,
                isDblClickNodeDoCheck: false,
                isClickCheckboxDoOpenClose: false,
                isClickCheckboxDoOpenCheck: false,
                isDblClickCheckboxDoOpenClose: false,
                onCheck: false
            };
            h.checkbox.rightmouse = {
                isCheckLinked: true,
                isClickCheckboxDoCheck: false,
                isClickNodeDoCheck: false,
                isClickCheckboxDoOpenClose: false,
                isClickCheckboxDoOpenCheck: false,
                onCheck: false
            };
            if (e.checkbox.readOnly == true) {
                h.checkbox.readOnly = true
            }
            if (e.checkbox.disabled == true) {
                h.checkbox.disabled = true
            }
            if (e.checkbox.leftmouse) {
                if (e.checkbox.leftmouse.isCheckLinked == false) {
                    h.checkbox.leftmouse.isCheckLinked = false
                }
                if (e.checkbox.leftmouse.isClickCheckboxDoCheck == false) {
                    h.checkbox.leftmouse.isClickCheckboxDoCheck = false
                }
                if (e.checkbox.leftmouse.isClickNodeDoCheck) {
                    h.checkbox.leftmouse.isClickNodeDoCheck = true
                }
                if (e.checkbox.leftmouse.isDblClickCheckboxDoCheck) {
                    h.checkbox.leftmouse.isDblClickCheckboxDoCheck = true
                }
                if (e.checkbox.leftmouse.isDblClickNodeDoCheck) {
                    h.checkbox.leftmouse.isDblClickNodeDoCheck = true
                }
                if (e.checkbox.leftmouse.isClickCheckboxDoOpenClose) {
                    h.checkbox.leftmouse.isClickCheckboxDoOpenClose = true
                }
                if (e.checkbox.leftmouse.isClickCheckboxDoOpenCheck) {
                    h.checkbox.leftmouse.isClickCheckboxDoOpenCheck = true
                }
                if (e.checkbox.leftmouse.isDblClickCheckboxDoOpenClose) {
                    h.checkbox.leftmouse.isDblClickCheckboxDoOpenClose = true
                }
                if (e.checkbox.leftmouse.onCheck) {
                    h.checkbox.leftmouse.onCheck = e.checkbox.leftmouse.onCheck
                }
            }
            if (e.checkbox.rightmouse) {
                if (e.checkbox.rightmouse.isCheckLinked == false) {
                    h.checkbox.rightmouse.isCheckLinked = false
                }
                if (e.checkbox.rightmouse.isClickCheckboxDoCheck) {
                    h.checkbox.rightmouse.isClickCheckboxDoCheck = true
                }
                if (e.checkbox.rightmouse.isClickNodeDoCheck) {
                    h.checkbox.rightmouse.isClickNodeDoCheck = true
                }
                if (e.checkbox.rightmouse.isClickCheckboxDoOpenClose) {
                    h.checkbox.rightmouse.isClickCheckboxDoOpenClose = true
                }
                if (e.checkbox.rightmouse.isClickCheckboxDoOpenCheck) {
                    h.checkbox.rightmouse.isClickCheckboxDoOpenCheck = true
                }
                if (e.checkbox.rightmouse.onCheck) {
                    h.checkbox.rightmouse.onCheck = e.checkbox.rightmouse.onCheck
                }
            }
        }
        h.types = {
            max_depth: -2,
            max_children: -2,
            valid_children: ["folder"],
            types: {
                folder: {
                    valid_children: ["leaf", "folder"]
                },
                leaf: {
                    valid_children: "none"
                }
            }
        };
        if (e.nodesConfig) {
            var l = [],
                q = h.types.types;
            for (var j = 0; j < e.nodesConfig.length; j++) {
                var a = e.nodesConfig[j].name;
                if (a) {
                    q[a] = {};
                    if (e.nodesConfig[j].valid_children) {
                        q[a].valid_children = e.nodesConfig[j].valid_children
                    }
                    if (e.nodesConfig[j].icon) {
                        q[a].icon = {
                            image: e.nodesConfig[j].icon
                        }
                    }
                    l.push(a)
                }
            }
            h.types.valid_children = l
        }
        if (e.contextMenu) {
            h.contextmenu = {
                items: {}
            };

            function g(s, t) {
                if (s.length) {
                    var c = s.length;
                    for (var r = 0; r < c; r++) {
                        var v = s[r].name;
                        if (!t[v]) {
                            t[v] = {}
                        }
                        var u = t[v];
                        if (s[r].label) {
                            u.label = s[r].label
                        } else {
                            if (s[r].label == false) {
                                u.label = false
                            }
                        }
                        if (s[r].action) {
                            u.action = s[r].action
                        } else {
                            if (s[r].action == false) {
                                u.action = false
                            }
                        }
                        if (s[r]._disabled) {
                            u._disabled = s[r]._disabled
                        } else {
                            if (s[r]._disabled == false) {
                                u._disabled = false
                            }
                        }
                        if (s[r]._class) {
                            u._class = s[r]._class
                        } else {
                            if (s[r]._class == false) {
                                u._class = false
                            }
                        }
                        if (s[r].separator_before) {
                            u.separator_before = s[r].separator_before
                        } else {
                            if (s[r].separator_before == false) {
                                u.separator_before = false
                            }
                        }
                        if (s[r].separator_after) {
                            u.separator_after = s[r].separator_after
                        } else {
                            if (s[r].separator_after == false) {
                                u.separator_after = false
                            } else {
                                if (s[r].separator_after == undefined) {
                                    u.separator_after = (r == c - 1) ? false : true
                                }
                            }
                        }
                        if (s[r]._display) {
                            u._display = s[r]._display
                        } else {
                            if (s[r]._display == false) {
                                u._display = false
                            } else {
                                if (s[r]._display == undefined) {
                                    u._display = true
                                }
                            }
                        }
                        if (s[r].icon) {
                            u.icon = s[r].icon
                        } else {
                            if (s[r].icon == false) {
                                u.icon = false
                            }
                        }
                        if (s[r].submenu) {
                            u.action = false;
                            if (!u.submenu) {
                                u.submenu = {}
                            }
                            g(s[r].submenu, u.submenu)
                        }
                    }
                }
            }
            if (e.contextMenu.items && jQuery.isFunction(e.contextMenu.items)) {
                h.contextmenu.items = e.contextMenu.items
            } else {
                g(e.contextMenu, h.contextmenu.items)
            }
        }
        if (e.unique && e.unique.callbackFn) {
            h.unique = {};
            h.unique.callbackFn = e.unique.callbackFn
        }
        h.ui = {};
        if (e.isSelectLimit) {
            h.ui.select_limit = e.isSelectLimit
        }
        if (e.initSelectNodeIds) {
            var d = [];
            for (var p in e.initSelectNodeIds) {
                d[p] = e.container_id + "_" + e.initSelectNodeIds[p]
            }
            h.ui.initially_select = d
        }
        h.core = {
            newNodeName: e.newNodeName,
            loadingText: e.loadingText
        };
        if (e.attrMap) {
            h.core.attrMap = e.attrMap
        }
        if (e.isClickNodeDoOpenClose) {
            h.core.isClickNodeDoOpenClose = true
        } else {
            h.core.isClickNodeDoOpenClose = false
        }
        if (e.isDblClickNodeDoOpenClose) {
            h.core.isDblClickNodeDoOpenClose = true
        } else {
            h.core.isDblClickNodeDoOpenClose = false
        }
        if (e.isContextClickNodeDoOpenClose) {
            h.core.isContextClickNodeDoOpenClose = true
        } else {
            h.core.isContextClickNodeDoOpenClose = false
        }
        if (e.initOpenNodeIds) {
            var o = [];
            for (var p in e.initOpenNodeIds) {
                o[p] = e.container_id + "_" + e.initOpenNodeIds[p]
            }
            h.core.initially_open = o
        }
        if (e.beforeOpenNodeFn) {
            h.core.beforeOpenNodeFn = e.beforeOpenNodeFn
        }
        if (e.beforeDeleteNodeFn) {
            h.core.beforeDeleteNodeFn = e.beforeDeleteNodeFn
        }
        if (e.cookiesConfig) {
            h.cookies = {};
            if (e.cookiesConfig.signer) {
                h.cookies.signer = e.cookiesConfig.signer
            }
        }
        h.themes = {
            theme: "default",
            dots: e.isShowDots ? true : false,
            icons: e.isShowIcons ? true : false
        };
        f = m.jstree(h)
    }

    function b(c) {
        c = (typeof c == "string" || typeof c == "number") ? jQuery("#" + e.container_id + "_" + c) : jQuery(c);
        c = m.jstree("get_node", c);
        return c == -1 || !c ? null : c
    }
    this.getNode = b;
    this.appendNode = function(n) {
        var i = b(n.parent),
            r = e.renderNode ? e.renderNode : null,
            c = n.nodeData ? true : false;
        if (!i) {
            i = jQuery("#" + e.container_id)
        }
        if (!n.nodeData) {
            return m.jstree("create", i, "last", {
                text: e.newNodeName,
                rel: n.rel
            }, null, false)
        } else {
            return m.jstree("create", i, "last", n.nodeData, null, true)
        }
    };
    this.renameNode = function(n) {
        var i = b(n.node);
        var c = !(n.showInput ? true : false);
        m.jstree("rename", i, n.new_name, c)
    };
    this.deleteNode = function(i) {
        var c = b(i.node);
        m.jstree("remove", c)
    };
    this.deleteAllNodes = function() {
        jQuery("#" + e.container_id).children("ul").children("li").remove()
    };
    this.search = function(c) {
        m.jstree("search", c, true)
    };
    this.clearSearch = function() {
        m.jstree("clear_search")
    };
    this.refresh = function() {
        m.jstree("refresh", -1)
    };
    this.setDataProps = function(c) {
        m.jstree("setDataProps", c)
    };
    this.getNodeData = function(u) {
        u = b(u);
        if (!u || !u.length) {
            return null
        }
        var s = m.jstree("getDataProps");
        var r = jQuery(u).attr("id"),
            c = {};
        if (r) {
            r = r.substring((e.container_id + "_").length, r.length)
        }
        for (var n = 0; n < s.length; n++) {
            var t = s[n];
            c[t] = (t == "id") ? r : u.attr(t)
        }
        return c
    };
    this.getNodesData = function(i) {
        var n = [],
            r = this.getNodeData;
        var c = jQuery("#" + e.container_id).find("li");
        if (i && i.rel) {
            c = c.filter(function() {
                return jQuery(this).attr("rel") == i.rel
            })
        }
        if (i && i.hasClass) {
            c = c.filter(function() {
                return jQuery(this).children("a").hasClass(i.hasClass)
            })
        }
        if (c && c.length) {
            c.each(function() {
                n.push(r(this))
            })
        }
        return n
    };
    this.getNodeAndChildrensData = function(n) {
        n = b(n);
        var c = this.getNodeData(n);
        if (!c) {
            return null
        }
        var r = this;

        function i(u, t) {
            if (u.hasClass("jstree-closed")) {
                t.children = []
            }
            var s = jQuery(u).children("ul").children("li");
            if (s && s.length) {
                t.children = [];
                s.each(function() {
                    var v = r.getNodeData(jQuery(this));
                    i(jQuery(this), v);
                    t.children.push(v)
                })
            }
        }
        i(n, c);
        return c
    };
    this.getSelectedNodesLevelData = function() {
        var r = [],
            n = e.isShowCheckbox ? m.jstree("get_checked") : m.jstree("get_selected"),
            s = this,
            i = "",
            c = "_NLTREE_";
        n.each(function() {
            if (i.indexOf(c + jQuery(this).attr("id").replace(e.container_id + "_", "") + c) == -1) {
                var v = b(this);
                var t = s.getNodeData(v);
                if (!t) {
                    return
                }
                i = i + c + t.id + c;

                function u(y, x) {
                    var w = jQuery(y).children("ul").children("li.jstree-checked");
                    if (w && w.length) {
                        x.children = [];
                        w.each(function() {
                            if (i.indexOf(c + jQuery(this).attr("id").replace(e.container_id + "_", "") + c) == -1) {
                                var z = s.getNodeData(this);
                                if (!z) {
                                    return
                                }
                                i = i + c + z.id + c;
                                u(this, z);
                                x.children.push(z)
                            }
                        })
                    }
                }
                u(v, t);
                r.push(t)
            }
        });
        return r
    };
    this.getSelectedNodesData = function() {
        var i = [],
            c = e.isShowCheckbox ? m.jstree("get_checked") : m.jstree("get_selected"),
            n = this.getNodeData;
        c.each(function() {
            i.push(n(this))
        });
        return i
    };
    this.openAll = function() {
        m.jstree("open_all")
    };
    this.closeAll = function() {
        m.jstree("close_all")
    };
    this.openNode = function(i, n, c) {
        i = b(i);
        m.jstree("open_node", i, n, c)
    };
    this.closeNode = function(c) {
        c = b(c);
        m.jstree("close_node", c)
    };
    this.selectNode = function(c) {
        c = b(c);
        m.jstree("select_node", c)
    };
    this.unselectNode = function(c) {
        c = b(c);
        m.jstree("deselect_node", c)
    };
    this.freshExtParam = function(c) {
        if (c) {
            e.extParam = c
        }
    };
    this.getParent = function(c) {
        c = b(c);
        c = m.jstree("get_parent", c);
        return c == -1 ? null : c
    };
    this.getParents = function(r) {
        var n = [],
            i = this;

        function c(s) {
            s = i.getParent(s);
            if (s) {
                n.push(s);
                c(s)
            }
        }
        c(r);
        return n
    };
    this.getChildren = function(c) {
        var i = [];
        c = b(c);
        c = m.jstree("get_children", c);
        if (c != -1) {
            c.each(function() {
                i.push(jQuery(this))
            });
            return i
        }
        return null
    };
    this.hasChildren = function(i) {
        var c = b(i.id);
        return c.children("ul").children("li").length > 0 ? true : false
    };
    this.checkAll = function() {
        m.jstree("check_all")
    };
    this.uncheckAll = function() {
        m.jstree("uncheck_all")
    };
    this.unselectAll = function(i) {
        if (i && i.node) {
            var c = b(i.node);
            m.jstree("deselect_all", c)
        } else {
            m.jstree("deselect_all")
        }
    };
    this.checkNode = function(c, i) {
        c = b(c);
        m.jstree("check_node", c, i)
    };
    this.uncheckNode = function(c, i) {
        c = b(c);
        m.jstree("uncheck_node", c, i)
    };
    this.isNodeChecked = function(c) {
        c = b(c);
        return c && c.length ? c.is(".jstree-checked") : false
    };
    this.addClass = function(s, r) {
        function c(i) {
            i = b(i);
            jQuery(i).children("a").addClass(r)
        }
        var t = c;
        if (jQuery.isArray(s)) {
            for (var n = 0; n < s.length; n++) {
                if (s[n].id) {
                    t(s[n].id);
                    if (s[n].children && s[n].children.length) {
                        this.addClass(s[n].children, r)
                    }
                } else {
                    t(s[n])
                }
            }
        } else {
            if (s.id) {
                t(s.id);
                if (s.children && s.children.length) {
                    this.addClass(s.children, r)
                }
            } else {
                t(s)
            }
        }
    };
    this.removeClass = function(s, n) {
        function r(i) {
            i = b(i);
            jQuery(i).children("a").removeClass(n)
        }
        var t = r;
        if (jQuery.isArray(s)) {
            for (var c = 0; c < s.length; c++) {
                if (s[c].id) {
                    t(s[c].id);
                    if (s[c].children && s[c].children.length) {
                        this.removeClass(s[c].children, n)
                    }
                } else {
                    t(s[c])
                }
            }
        } else {
            if (s.id) {
                t(s.id);
                if (s.children && s.children.length) {
                    this.removeClass(s.children, n)
                }
            } else {
                t(s)
            }
        }
    };
    this.hasClass = function(i, c) {
        i = b(i);
        return jQuery(i).children("a").hasClass(c)
    };
    this.stopPropagation = function(c) {
        if (c && c.stopPropagation) {
            c.stopPropagation()
        } else {
            window.event.cancelBubble = true
        }
    };
    this.bind = function(c, i) {
        c = c + "._jstree";
        if (f) {
            f.bind(c, i)
        }
    }
};
